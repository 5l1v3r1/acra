// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	preparedQuery      PreparedQuery
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const PG_ESCAPE_STRING = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const PRIMARY = 57452
const COLUMN = 57453
const CONSTRAINT = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const BEGIN = 57478
const START = 57479
const TRANSACTION = 57480
const COMMIT = 57481
const ROLLBACK = 57482
const DEALLOCATE = 57483
const PREPARE = 57484
const EXECUTE = 57485
const BIT = 57486
const TINYINT = 57487
const SMALLINT = 57488
const MEDIUMINT = 57489
const INT = 57490
const INTEGER = 57491
const BIGINT = 57492
const INTNUM = 57493
const REAL = 57494
const DOUBLE = 57495
const FLOAT_TYPE = 57496
const DECIMAL = 57497
const NUMERIC = 57498
const TIME = 57499
const TIMESTAMP = 57500
const DATETIME = 57501
const YEAR = 57502
const CHAR = 57503
const VARCHAR = 57504
const BOOL = 57505
const CHARACTER = 57506
const VARBINARY = 57507
const NCHAR = 57508
const TEXT = 57509
const TINYTEXT = 57510
const MEDIUMTEXT = 57511
const LONGTEXT = 57512
const BLOB = 57513
const TINYBLOB = 57514
const MEDIUMBLOB = 57515
const LONGBLOB = 57516
const JSON = 57517
const ENUM = 57518
const GEOMETRY = 57519
const POINT = 57520
const LINESTRING = 57521
const POLYGON = 57522
const GEOMETRYCOLLECTION = 57523
const MULTIPOINT = 57524
const MULTILINESTRING = 57525
const MULTIPOLYGON = 57526
const NULLX = 57527
const AUTO_INCREMENT = 57528
const APPROXNUM = 57529
const SIGNED = 57530
const UNSIGNED = 57531
const ZEROFILL = 57532
const DATABASES = 57533
const TABLES = 57534
const VITESS_KEYSPACES = 57535
const VITESS_SHARDS = 57536
const VITESS_TABLETS = 57537
const VSCHEMA_TABLES = 57538
const EXTENDED = 57539
const FULL = 57540
const PROCESSLIST = 57541
const NAMES = 57542
const CHARSET = 57543
const GLOBAL = 57544
const SESSION = 57545
const ISOLATION = 57546
const LEVEL = 57547
const READ = 57548
const WRITE = 57549
const ONLY = 57550
const REPEATABLE = 57551
const COMMITTED = 57552
const UNCOMMITTED = 57553
const SERIALIZABLE = 57554
const CURRENT_TIMESTAMP = 57555
const DATABASE = 57556
const CURRENT_DATE = 57557
const CURRENT_TIME = 57558
const LOCALTIME = 57559
const LOCALTIMESTAMP = 57560
const UTC_DATE = 57561
const UTC_TIME = 57562
const UTC_TIMESTAMP = 57563
const REPLACE = 57564
const CONVERT = 57565
const CAST = 57566
const SUBSTR = 57567
const SUBSTRING = 57568
const GROUP_CONCAT = 57569
const SEPARATOR = 57570
const MATCH = 57571
const AGAINST = 57572
const BOOLEAN = 57573
const LANGUAGE = 57574
const WITH = 57575
const QUERY = 57576
const EXPANSION = 57577
const UNUSED = 57578
const RETURNING = 57579

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	151, 268,
	152, 268,
	-2, 258,
	-1, 248,
	110, 610,
	-2, 507,
	-1, 266,
	53, 607,
	110, 607,
	111, 607,
	112, 607,
	-2, 510,
	-1, 317,
	81, 768,
	-2, 62,
	-1, 318,
	81, 729,
	-2, 63,
	-1, 323,
	81, 713,
	-2, 572,
	-1, 325,
	81, 750,
	-2, 574,
	-1, 589,
	52, 45,
	54, 45,
	-2, 47,
	-1, 732,
	110, 612,
	-2, 609,
	-1, 733,
	110, 610,
	-2, 608,
	-1, 779,
	110, 610,
	-2, 507,
	-1, 939,
	5, 31,
	-2, 411,
	-1, 964,
	5, 30,
	-2, 544,
	-1, 1195,
	5, 31,
	-2, 545,
	-1, 1242,
	5, 30,
	-2, 547,
	-1, 1305,
	5, 31,
	-2, 548,
}

const yyPrivate = 57344

const yyLast = 9545

var yyAct = [...]int{

	248, 1296, 880, 537, 659, 1253, 1100, 833, 797, 1128,
	837, 874, 1027, 1201, 815, 1101, 584, 836, 758, 322,
	798, 536, 3, 227, 1097, 277, 984, 860, 968, 931,
	1030, 599, 846, 762, 80, 1018, 59, 582, 192, 785,
	218, 192, 973, 469, 735, 475, 1073, 419, 598, 793,
	571, 870, 192, 586, 913, 250, 316, 765, 489, 481,
	251, 304, 236, 24, 303, 692, 313, 311, 192, 192,
	321, 58, 1190, 1325, 192, 226, 424, 1315, 897, 1323,
	1303, 1321, 881, 1314, 1302, 1092, 1187, 219, 220, 221,
	222, 423, 896, 1262, 551, 1123, 1124, 829, 830, 233,
	467, 54, 29, 30, 1122, 302, 1278, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 901,
	600, 512, 601, 240, 992, 231, 63, 991, 828, 895,
	993, 444, 687, 458, 242, 188, 184, 185, 186, 764,
	689, 460, 26, 27, 54, 29, 30, 690, 1009, 697,
	853, 1213, 698, 432, 65, 66, 67, 68, 69, 861,
	1228, 45, 1175, 1074, 1173, 223, 31, 1134, 1135, 1136,
	1322, 449, 217, 455, 456, 1139, 1137, 892, 889, 890,
	1320, 888, 192, 794, 192, 40, 1297, 1051, 795, 56,
	192, 433, 426, 1076, 182, 446, 192, 448, 816, 818,
	321, 321, 321, 321, 667, 321, 899, 902, 181, 1260,
	182, 848, 848, 321, 658, 983, 982, 1254, 981, 421,
	429, 195, 445, 447, 192, 183, 1283, 848, 1078, 1198,
	1082, 1256, 1077, 1060, 1075, 1084, 525, 526, 947, 1080,
	1003, 925, 706, 491, 894, 492, 834, 187, 1079, 33,
	34, 36, 35, 38, 478, 420, 439, 512, 703, 907,
	488, 1081, 1083, 1143, 486, 1279, 893, 477, 1048, 1055,
	39, 46, 47, 817, 1050, 48, 49, 37, 502, 854,
	488, 512, 1288, 1153, 1301, 861, 971, 602, 1094, 41,
	42, 786, 43, 44, 50, 51, 52, 795, 1255, 1038,
	487, 486, 192, 898, 847, 847, 443, 1261, 1259, 192,
	192, 192, 662, 1291, 1144, 321, 900, 488, 850, 742,
	847, 604, 786, 851, 954, 845, 843, 1036, 425, 844,
	1007, 483, 55, 740, 741, 739, 56, 201, 1138, 908,
	435, 436, 437, 922, 923, 924, 1054, 738, 501, 500,
	510, 511, 503, 504, 505, 506, 507, 508, 509, 502,
	479, 212, 512, 472, 476, 180, 528, 1049, 1307, 1047,
	1229, 1219, 452, 453, 454, 55, 457, 1218, 590, 759,
	493, 596, 760, 1308, 462, 553, 554, 555, 556, 557,
	558, 559, 1037, 1289, 932, 1022, 451, 1042, 1039, 1032,
	1033, 1040, 1035, 1034, 487, 486, 427, 428, 1021, 1010,
	1236, 1096, 196, 538, 1041, 943, 994, 942, 198, 995,
	1044, 488, 549, 321, 1216, 204, 200, 1161, 1019, 192,
	192, 321, 301, 192, 487, 486, 192, 1311, 468, 468,
	192, 1286, 321, 321, 321, 321, 321, 321, 321, 321,
	1131, 488, 202, 1246, 1294, 207, 321, 321, 1130, 676,
	205, 1004, 192, 1246, 468, 1266, 319, 192, 505, 506,
	507, 508, 509, 502, 246, 1265, 512, 1246, 1247, 709,
	710, 715, 1210, 1209, 705, 192, 197, 724, 726, 727,
	944, 491, 725, 733, 674, 883, 278, 53, 1119, 468,
	1140, 711, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 732, 199, 512, 208, 209, 210, 211, 215,
	704, 736, 56, 761, 214, 213, 487, 486, 693, 693,
	673, 699, 1197, 468, 1150, 1149, 769, 487, 486, 487,
	486, 672, 713, 488, 663, 779, 779, 730, 661, 728,
	53, 779, 1146, 1147, 488, 656, 488, 441, 232, 1146,
	1145, 773, 937, 468, 308, 434, 192, 420, 779, 192,
	192, 192, 192, 192, 568, 468, 1223, 254, 225, 712,
	969, 192, 771, 468, 192, 60, 766, 768, 192, 608,
	607, 771, 192, 192, 657, 790, 321, 822, 970, 592,
	778, 781, 666, 1193, 1063, 773, 787, 783, 321, 1098,
	26, 949, 969, 677, 678, 679, 680, 681, 682, 683,
	684, 721, 722, 799, 937, 568, 1152, 685, 686, 823,
	812, 801, 802, 800, 804, 1148, 803, 770, 772, 821,
	568, 820, 26, 26, 593, 307, 826, 937, 996, 862,
	863, 864, 825, 788, 948, 567, 840, 56, 855, 192,
	827, 937, 321, 909, 321, 946, 962, 876, 192, 963,
	1241, 192, 321, 595, 538, 1183, 468, 776, 777, 568,
	774, 775, 707, 814, 875, 594, 782, 592, 1113, 56,
	56, 999, 233, 974, 975, 660, 450, 450, 450, 450,
	789, 450, 791, 792, 872, 873, 970, 733, 945, 450,
	1038, 319, 871, 501, 500, 510, 511, 503, 504, 505,
	506, 507, 508, 509, 502, 866, 732, 512, 865, 53,
	529, 530, 531, 532, 533, 534, 535, 832, 1036, 56,
	71, 878, 466, 1133, 521, 522, 524, 1098, 969, 1023,
	977, 670, 461, 914, 719, 915, 503, 504, 505, 506,
	507, 508, 509, 502, 980, 736, 512, 573, 576, 577,
	578, 574, 979, 575, 579, 539, 540, 541, 542, 543,
	544, 545, 546, 547, 927, 550, 552, 552, 552, 552,
	552, 552, 552, 552, 560, 561, 562, 563, 806, 809,
	805, 807, 1319, 1037, 810, 583, 808, 1313, 1042, 1039,
	1032, 1033, 1040, 1035, 1034, 964, 811, 1059, 577, 578,
	985, 237, 238, 192, 953, 1041, 910, 523, 1318, 966,
	482, 1031, 920, 884, 919, 886, 470, 321, 1014, 911,
	912, 606, 476, 905, 480, 442, 978, 997, 471, 1006,
	986, 1293, 988, 1292, 1239, 1000, 1191, 1224, 921, 989,
	987, 885, 934, 935, 669, 581, 234, 235, 1013, 482,
	1015, 1016, 1017, 918, 939, 940, 941, 1001, 1002, 1024,
	321, 917, 321, 950, 1011, 1012, 307, 228, 956, 731,
	957, 958, 959, 960, 1271, 229, 856, 857, 858, 859,
	464, 60, 1020, 936, 1270, 321, 938, 1226, 192, 192,
	192, 465, 867, 868, 869, 970, 484, 192, 1280, 450,
	1043, 955, 1214, 951, 702, 62, 321, 450, 1029, 695,
	7, 696, 6, 694, 5, 64, 591, 57, 450, 450,
	450, 450, 450, 450, 450, 450, 1, 700, 733, 1189,
	527, 882, 450, 450, 1026, 891, 1295, 1252, 1067, 1127,
	1066, 842, 1085, 779, 835, 418, 1106, 732, 985, 734,
	779, 1099, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 1104, 1093, 1102,
	1109, 1086, 319, 70, 1107, 1072, 1287, 321, 841, 321,
	1129, 1258, 1212, 849, 838, 1108, 1008, 852, 1132, 1126,
	1290, 1005, 613, 611, 1125, 612, 1121, 610, 799, 1141,
	1142, 53, 615, 1120, 192, 799, 614, 609, 203, 314,
	580, 603, 1155, 877, 485, 82, 539, 1071, 274, 267,
	767, 269, 270, 271, 272, 1157, 192, 72, 268, 273,
	1046, 1025, 1160, 1045, 887, 1053, 688, 906, 459, 473,
	206, 321, 520, 916, 192, 308, 308, 308, 308, 308,
	990, 1154, 320, 737, 1105, 708, 1052, 474, 1269, 1225,
	583, 952, 819, 548, 1156, 1118, 784, 1159, 308, 1095,
	1171, 1163, 253, 723, 265, 262, 264, 191, 263, 714,
	216, 1164, 961, 731, 494, 1110, 1111, 252, 244, 1112,
	306, 224, 1114, 564, 1202, 572, 1202, 1202, 1202, 192,
	1207, 570, 569, 976, 1192, 243, 321, 191, 191, 1203,
	1204, 1205, 1200, 191, 972, 1206, 997, 305, 1062, 1186,
	1277, 718, 28, 61, 1208, 239, 307, 307, 307, 307,
	307, 23, 321, 321, 321, 22, 21, 19, 450, 18,
	450, 307, 17, 20, 1222, 1221, 16, 1165, 450, 307,
	15, 14, 32, 1215, 1167, 1217, 13, 12, 11, 10,
	9, 8, 4, 230, 25, 2, 1177, 1178, 1179, 0,
	1162, 1182, 0, 0, 1238, 0, 0, 1227, 1244, 1245,
	0, 0, 0, 0, 1194, 1195, 1196, 0, 1199, 1240,
	0, 1129, 0, 0, 0, 928, 929, 930, 1242, 1102,
	1257, 1251, 0, 1263, 1202, 1264, 0, 0, 926, 0,
	0, 1188, 0, 838, 0, 0, 0, 1267, 538, 0,
	0, 191, 0, 191, 0, 0, 0, 1284, 1281, 191,
	573, 576, 577, 578, 574, 191, 575, 579, 1285, 0,
	974, 975, 0, 0, 0, 1282, 0, 1102, 0, 309,
	0, 0, 0, 0, 0, 1299, 0, 0, 1028, 0,
	0, 779, 0, 463, 1306, 0, 0, 1235, 0, 1304,
	965, 0, 967, 0, 0, 0, 0, 0, 1312, 1309,
	0, 0, 0, 0, 1248, 1249, 1250, 190, 0, 0,
	0, 0, 1316, 1317, 0, 0, 0, 737, 0, 308,
	0, 0, 1065, 1220, 0, 538, 0, 0, 0, 0,
	1272, 1273, 1274, 1275, 1276, 0, 799, 0, 312, 0,
	0, 0, 0, 422, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1168, 1169, 0, 1170, 0, 0,
	1172, 191, 1174, 0, 0, 0, 0, 0, 191, 588,
	191, 0, 0, 0, 0, 0, 450, 0, 1300, 0,
	0, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 1180, 468, 838, 0, 838, 1310, 0, 0, 0,
	307, 450, 0, 0, 0, 1298, 538, 1069, 1070, 1211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1087, 1088, 0, 1090, 1091, 0, 0, 1328, 1329, 501,
	500, 510, 511, 503, 504, 505, 506, 507, 508, 509,
	502, 0, 0, 512, 0, 0, 0, 0, 0, 0,
	0, 430, 0, 431, 1184, 0, 0, 1065, 0, 438,
	1103, 0, 53, 468, 0, 440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 1116,
	1117, 0, 0, 0, 0, 0, 0, 0, 191, 191,
	0, 0, 191, 0, 0, 191, 0, 0, 0, 675,
	501, 500, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 0, 0, 512, 0, 0, 0, 0, 0,
	0, 191, 838, 0, 0, 0, 701, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 0,
	0, 512, 0, 1166, 191, 0, 0, 0, 0, 1028,
	838, 0, 675, 0, 0, 0, 0, 0, 0, 0,
	308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 566, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 1176, 243, 0, 0, 0, 0, 0, 1181, 1185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 243, 0, 0, 780, 780, 243, 0, 0, 0,
	780, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 243, 243, 243, 0, 191, 0, 780, 191, 191,
	191, 191, 191, 0, 0, 0, 0, 0, 0, 0,
	813, 307, 0, 191, 0, 0, 0, 588, 450, 0,
	0, 191, 191, 0, 0, 1230, 1231, 1068, 1232, 1233,
	1234, 501, 500, 510, 511, 503, 504, 505, 506, 507,
	508, 509, 502, 0, 0, 512, 0, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 0,
	1103, 512, 0, 1243, 0, 0, 0, 0, 664, 665,
	0, 0, 668, 0, 0, 671, 501, 500, 510, 511,
	503, 504, 505, 506, 507, 508, 509, 502, 191, 0,
	512, 1268, 933, 0, 0, 0, 0, 191, 0, 0,
	191, 691, 630, 0, 0, 0, 0, 0, 1103, 0,
	53, 0, 501, 500, 510, 511, 503, 504, 505, 506,
	507, 508, 509, 502, 720, 0, 512, 0, 0, 0,
	0, 0, 0, 496, 0, 499, 675, 0, 0, 0,
	0, 513, 514, 515, 516, 517, 518, 519, 243, 497,
	498, 495, 501, 500, 510, 511, 503, 504, 505, 506,
	507, 508, 509, 502, 0, 0, 512, 0, 0, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 243, 500, 510, 511, 503, 504, 505,
	506, 507, 508, 509, 502, 796, 0, 512, 0, 631,
	0, 0, 0, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 824, 644, 645, 646, 647, 648, 649, 650,
	0, 651, 652, 653, 654, 655, 632, 633, 634, 635,
	616, 617, 191, 0, 619, 0, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 636, 637, 638, 639,
	640, 641, 642, 643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 1057, 1058,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 675, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 780, 0, 0, 0, 0, 0, 0, 780,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 0,
	0, 0, 0, 0, 0, 0, 1061, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 407, 397, 0, 369,
	409, 347, 361, 417, 362, 363, 390, 333, 377, 132,
	359, 0, 350, 328, 356, 329, 348, 371, 100, 374,
	346, 399, 380, 114, 415, 116, 385, 0, 149, 125,
	0, 0, 373, 401, 375, 395, 368, 391, 338, 384,
	410, 360, 388, 411, 0, 0, 0, 81, 0, 0,
	83, 839, 0, 0, 0, 0, 0, 93, 0, 387,
	406, 358, 389, 327, 386, 0, 331, 334, 416, 404,
	353, 354, 998, 1151, 0, 0, 0, 0, 0, 372,
	376, 392, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 383, 0, 1158, 0, 335, 332, 0,
	370, 0, 0, 0, 337, 0, 352, 393, 0, 326,
	396, 402, 367, 193, 405, 365, 364, 408, 138, 0,
	780, 152, 105, 104, 113, 400, 349, 357, 96, 355,
	144, 134, 164, 382, 135, 143, 117, 156, 139, 163,
	194, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 178, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 330, 0, 150, 166, 179, 345,
	403, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 341, 344, 339, 340, 378, 379, 412, 413, 414,
	394, 336, 0, 342, 343, 0, 398, 381, 84, 0,
	115, 176, 140, 102, 167, 407, 397, 0, 369, 409,
	347, 361, 417, 362, 363, 390, 333, 377, 132, 359,
	0, 350, 328, 356, 329, 348, 371, 100, 374, 346,
	399, 380, 114, 415, 116, 385, 0, 149, 125, 0,
	0, 373, 401, 375, 395, 368, 391, 338, 384, 410,
	360, 388, 411, 0, 0, 0, 81, 0, 0, 83,
	839, 0, 0, 0, 0, 0, 93, 0, 387, 406,
	358, 389, 327, 386, 0, 331, 334, 416, 404, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	392, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 383, 0, 0, 0, 335, 332, 0, 370,
	0, 0, 0, 337, 0, 352, 393, 0, 326, 396,
	402, 367, 193, 405, 365, 364, 408, 138, 0, 0,
	152, 105, 104, 113, 400, 349, 357, 96, 355, 144,
	134, 164, 382, 135, 143, 117, 156, 139, 163, 194,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 178, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 330, 0, 150, 166, 179, 345, 403,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	341, 344, 339, 340, 378, 379, 412, 413, 414, 394,
	336, 0, 342, 343, 0, 398, 381, 84, 0, 115,
	176, 140, 102, 167, 407, 397, 0, 369, 409, 347,
	361, 417, 362, 363, 390, 333, 377, 132, 359, 0,
	350, 328, 356, 329, 348, 371, 100, 374, 346, 399,
	380, 114, 415, 116, 385, 0, 149, 125, 0, 0,
	373, 401, 375, 395, 368, 391, 338, 384, 410, 360,
	388, 411, 56, 0, 0, 81, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 93, 0, 387, 406, 358,
	389, 327, 386, 0, 331, 334, 416, 404, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 372, 376, 392,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 383, 0, 0, 0, 335, 332, 0, 370, 0,
	0, 0, 337, 0, 352, 393, 0, 326, 396, 402,
	367, 193, 405, 365, 364, 408, 138, 0, 0, 152,
	105, 104, 113, 400, 349, 357, 96, 355, 144, 134,
	164, 382, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 330, 0, 150, 166, 179, 345, 403, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 341,
	344, 339, 340, 378, 379, 412, 413, 414, 394, 336,
	0, 342, 343, 0, 398, 381, 84, 0, 115, 176,
	140, 102, 167, 407, 397, 0, 369, 409, 347, 361,
	417, 362, 363, 390, 333, 377, 132, 359, 0, 350,
	328, 356, 329, 348, 371, 100, 374, 346, 399, 380,
	114, 415, 116, 385, 0, 149, 125, 0, 0, 373,
	401, 375, 395, 368, 391, 338, 384, 410, 360, 388,
	411, 0, 0, 0, 81, 0, 0, 83, 0, 0,
	0, 0, 0, 0, 93, 0, 387, 406, 358, 389,
	327, 386, 0, 331, 334, 416, 404, 353, 354, 0,
	0, 0, 0, 0, 0, 0, 372, 376, 392, 366,
	0, 0, 0, 0, 0, 0, 1064, 0, 351, 0,
	383, 0, 0, 0, 335, 332, 0, 370, 0, 0,
	0, 337, 0, 352, 393, 0, 326, 396, 402, 367,
	193, 405, 365, 364, 408, 138, 0, 0, 152, 105,
	104, 113, 400, 349, 357, 96, 355, 144, 134, 164,
	382, 135, 143, 117, 156, 139, 163, 194, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 178, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 330, 0, 150, 166, 179, 345, 403, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 341, 344,
	339, 340, 378, 379, 412, 413, 414, 394, 336, 0,
	342, 343, 0, 398, 381, 84, 0, 115, 176, 140,
	102, 167, 407, 397, 0, 369, 409, 347, 361, 417,
	362, 363, 390, 333, 377, 132, 359, 0, 350, 328,
	356, 329, 348, 371, 100, 374, 346, 399, 380, 114,
	415, 116, 385, 0, 149, 125, 0, 0, 373, 401,
	375, 395, 368, 391, 338, 384, 410, 360, 388, 411,
	0, 0, 0, 81, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 93, 0, 387, 406, 358, 389, 327,
	386, 0, 331, 334, 416, 404, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 372, 376, 392, 366, 0,
	0, 0, 0, 0, 0, 729, 0, 351, 0, 383,
	0, 0, 0, 335, 332, 0, 370, 0, 0, 0,
	337, 0, 352, 393, 0, 326, 396, 402, 367, 193,
	405, 365, 364, 408, 138, 0, 0, 152, 105, 104,
	113, 400, 349, 357, 96, 355, 144, 134, 164, 382,
	135, 143, 117, 156, 139, 163, 194, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 178, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	330, 0, 150, 166, 179, 345, 403, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 341, 344, 339,
	340, 378, 379, 412, 413, 414, 394, 336, 0, 342,
	343, 0, 398, 381, 84, 0, 115, 176, 140, 102,
	167, 407, 397, 0, 369, 409, 347, 361, 417, 362,
	363, 390, 333, 377, 132, 359, 0, 350, 328, 356,
	329, 348, 371, 100, 374, 346, 399, 380, 114, 415,
	116, 385, 0, 149, 125, 0, 0, 373, 401, 375,
	395, 368, 391, 338, 384, 410, 360, 388, 411, 0,
	0, 0, 81, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 93, 0, 387, 406, 358, 389, 327, 386,
	0, 331, 334, 416, 404, 353, 354, 0, 0, 0,
	0, 0, 0, 0, 372, 376, 392, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 383, 0,
	0, 0, 335, 332, 0, 370, 0, 0, 0, 337,
	0, 352, 393, 0, 326, 396, 402, 367, 193, 405,
	365, 364, 408, 138, 0, 0, 152, 105, 104, 113,
	400, 349, 357, 96, 355, 144, 134, 164, 382, 135,
	143, 117, 156, 139, 163, 194, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 178, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 330,
	0, 150, 166, 179, 345, 403, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 341, 344, 339, 340,
	378, 379, 412, 413, 414, 394, 336, 0, 342, 343,
	0, 398, 381, 84, 0, 115, 176, 140, 102, 167,
	407, 397, 0, 369, 409, 347, 361, 417, 362, 363,
	390, 333, 377, 132, 359, 0, 350, 328, 356, 329,
	348, 371, 100, 374, 346, 399, 380, 114, 415, 116,
	385, 0, 149, 125, 0, 0, 373, 401, 375, 395,
	368, 391, 338, 384, 410, 360, 388, 411, 0, 0,
	0, 81, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 93, 0, 387, 406, 358, 389, 327, 386, 0,
	331, 334, 416, 404, 353, 354, 0, 0, 0, 0,
	0, 0, 0, 372, 376, 392, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 383, 0, 0,
	0, 335, 332, 0, 370, 0, 0, 0, 337, 0,
	352, 393, 0, 326, 396, 402, 367, 193, 405, 365,
	364, 408, 138, 0, 0, 152, 105, 104, 113, 400,
	349, 357, 96, 355, 144, 134, 164, 382, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 324, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 330, 0,
	150, 166, 179, 345, 403, 172, 173, 174, 175, 0,
	0, 0, 325, 323, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 341, 344, 339, 340, 378,
	379, 412, 413, 414, 394, 336, 0, 342, 343, 0,
	398, 381, 84, 0, 115, 176, 140, 102, 167, 407,
	397, 0, 369, 409, 347, 361, 417, 362, 363, 390,
	333, 377, 132, 359, 0, 350, 328, 356, 329, 348,
	371, 100, 374, 346, 399, 380, 114, 415, 116, 385,
	0, 149, 125, 0, 0, 373, 401, 375, 395, 368,
	391, 338, 384, 410, 360, 388, 411, 0, 0, 0,
	81, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	93, 0, 387, 406, 358, 389, 327, 386, 0, 331,
	334, 416, 404, 353, 354, 0, 0, 0, 0, 0,
	0, 0, 372, 376, 392, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 383, 0, 0, 0,
	335, 332, 0, 370, 0, 0, 0, 337, 0, 352,
	393, 0, 326, 396, 402, 367, 193, 405, 365, 364,
	408, 138, 0, 0, 152, 105, 104, 113, 400, 349,
	357, 96, 355, 144, 134, 164, 382, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 597,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 324, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 330, 0, 150,
	166, 179, 345, 403, 172, 173, 174, 175, 0, 0,
	0, 325, 323, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 341, 344, 339, 340, 378, 379,
	412, 413, 414, 394, 336, 0, 342, 343, 0, 398,
	381, 84, 0, 115, 176, 140, 102, 167, 407, 397,
	0, 369, 409, 347, 361, 417, 362, 363, 390, 333,
	377, 132, 359, 0, 350, 328, 356, 329, 348, 371,
	100, 374, 346, 399, 380, 114, 415, 116, 385, 0,
	149, 125, 0, 0, 373, 401, 375, 395, 368, 391,
	338, 384, 410, 360, 388, 411, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 387, 406, 358, 389, 327, 386, 0, 331, 334,
	416, 404, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 372, 376, 392, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 383, 0, 0, 0, 335,
	332, 0, 370, 0, 0, 0, 337, 0, 352, 393,
	0, 326, 396, 402, 367, 193, 405, 365, 364, 408,
	138, 0, 0, 152, 105, 104, 113, 400, 349, 357,
	96, 355, 144, 134, 164, 382, 135, 143, 117, 156,
	139, 163, 194, 171, 154, 170, 85, 153, 315, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	178, 90, 169, 89, 324, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 330, 0, 150, 166,
	179, 345, 403, 172, 173, 174, 175, 0, 0, 0,
	325, 323, 318, 317, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 341, 344, 339, 340, 378, 379, 412,
	413, 414, 394, 336, 0, 342, 343, 0, 398, 381,
	84, 0, 115, 176, 140, 102, 167, 132, 0, 0,
	763, 0, 249, 0, 0, 0, 100, 0, 247, 0,
	0, 114, 288, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 279, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 81, 274, 267, 266, 269,
	270, 271, 272, 0, 0, 93, 268, 273, 275, 276,
	0, 0, 245, 260, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 241, 0, 0,
	0, 299, 0, 259, 0, 0, 255, 256, 261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 297, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 289,
	298, 295, 296, 293, 294, 292, 291, 290, 300, 281,
	282, 283, 284, 286, 0, 285, 84, 0, 115, 176,
	140, 102, 167, 132, 0, 0, 0, 0, 249, 0,
	0, 0, 100, 0, 247, 0, 0, 114, 288, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 81, 274, 267, 266, 269, 270, 271, 272, 0,
	0, 93, 268, 273, 275, 276, 0, 0, 245, 260,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 1237, 0, 0, 0, 299, 0, 259,
	0, 0, 255, 256, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	297, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 179, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 289, 298, 295, 296, 293,
	294, 292, 291, 290, 300, 281, 282, 283, 284, 286,
	0, 285, 84, 0, 115, 176, 140, 102, 167, 132,
	0, 0, 0, 0, 249, 0, 0, 0, 100, 0,
	247, 0, 0, 114, 288, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 279, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 468, 81, 274, 267,
	266, 269, 270, 271, 272, 0, 0, 93, 268, 273,
	275, 276, 0, 0, 245, 260, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 0,
	0, 0, 0, 299, 0, 259, 0, 0, 255, 256,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 297, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	194, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 178, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 179, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 289, 298, 295, 296, 293, 294, 292, 291, 290,
	300, 281, 282, 283, 284, 286, 0, 285, 84, 0,
	115, 176, 140, 102, 167, 132, 0, 0, 0, 0,
	249, 0, 0, 0, 100, 0, 247, 0, 0, 114,
	288, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 81, 274, 267, 266, 269, 270, 271,
	272, 0, 0, 93, 268, 273, 275, 276, 0, 0,
	245, 260, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 241, 0, 0, 0, 299,
	0, 259, 0, 0, 255, 256, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 297, 0, 138, 0, 0, 152, 105, 104,
	113, 0, 0, 0, 96, 0, 144, 134, 164, 0,
	135, 143, 117, 156, 139, 163, 194, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 178, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 179, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 289, 298, 295,
	296, 293, 294, 292, 291, 290, 300, 281, 282, 283,
	284, 286, 0, 285, 84, 0, 115, 176, 140, 102,
	167, 132, 0, 0, 0, 0, 249, 0, 0, 0,
	100, 0, 247, 0, 0, 114, 288, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 279, 280, 0, 0,
	0, 0, 0, 0, 831, 0, 56, 0, 0, 81,
	274, 267, 266, 269, 270, 271, 272, 0, 0, 93,
	268, 273, 275, 276, 0, 0, 245, 260, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 0, 0, 0, 0, 299, 0, 259, 0, 0,
	255, 256, 261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 297, 0,
	138, 0, 0, 152, 105, 104, 113, 0, 0, 0,
	96, 0, 144, 134, 164, 0, 135, 143, 117, 156,
	139, 163, 194, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	178, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 0, 0, 150, 166,
	179, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 289, 298, 295, 296, 293, 294, 292,
	291, 290, 300, 281, 282, 283, 284, 286, 26, 285,
	84, 0, 115, 176, 140, 102, 167, 0, 0, 0,
	132, 0, 0, 0, 0, 249, 0, 0, 0, 100,
	0, 247, 0, 0, 114, 288, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 279, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 81, 274,
	267, 266, 269, 270, 271, 272, 0, 0, 93, 268,
	273, 275, 276, 0, 0, 245, 260, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	0, 0, 0, 0, 299, 0, 259, 0, 0, 255,
	256, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 297, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 289, 298, 295, 296, 293, 294, 292, 291,
	290, 300, 281, 282, 283, 284, 286, 0, 285, 84,
	0, 115, 176, 140, 102, 167, 132, 0, 0, 0,
	0, 249, 0, 0, 0, 100, 0, 247, 0, 0,
	114, 288, 116, 0, 0, 149, 125, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 81, 274, 267, 266, 269, 270,
	271, 272, 0, 0, 93, 268, 273, 275, 276, 0,
	0, 245, 260, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 0, 0, 0, 0,
	299, 0, 259, 0, 0, 255, 256, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 297, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 194, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 178, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 179, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 289, 298,
	295, 296, 293, 294, 292, 291, 290, 300, 281, 282,
	283, 284, 286, 132, 285, 84, 0, 115, 176, 140,
	102, 167, 100, 0, 0, 0, 0, 114, 288, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 81, 274, 267, 266, 269, 270, 271, 272, 0,
	0, 93, 268, 273, 275, 276, 0, 0, 0, 260,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 0, 0, 0, 0, 299, 0, 259,
	0, 0, 255, 256, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	297, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 1327, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 179, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 289, 298, 295, 296, 293,
	294, 292, 291, 290, 300, 281, 282, 283, 284, 286,
	132, 285, 84, 0, 115, 176, 140, 102, 167, 100,
	0, 0, 0, 0, 114, 288, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 279, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 81, 274,
	267, 266, 269, 270, 271, 272, 0, 0, 93, 268,
	273, 275, 276, 0, 0, 0, 260, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	0, 0, 0, 0, 299, 0, 259, 0, 0, 255,
	256, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 297, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 289, 298, 295, 296, 293, 294, 292, 291,
	290, 300, 281, 282, 283, 284, 286, 132, 285, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 501, 500, 510, 511, 503, 504, 505, 506, 507,
	508, 509, 502, 0, 0, 512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 84, 0, 115, 176,
	140, 102, 167, 100, 0, 0, 0, 0, 114, 0,
	116, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 73, 0,
	0, 0, 79, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 75, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 178, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 179, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 115, 176, 140, 102, 167,
	132, 0, 0, 0, 490, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 487, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 0, 0, 0, 26, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 81, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 84, 0, 115, 176,
	140, 102, 167, 100, 0, 0, 0, 0, 114, 0,
	116, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 83, 716, 0, 0, 717,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 194, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 178, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 179, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 115, 176, 140, 102, 167,
	132, 0, 0, 0, 587, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 81, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 84, 0, 115, 176,
	140, 102, 167, 100, 0, 605, 0, 0, 114, 0,
	116, 0, 0, 149, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 138, 0, 0, 152, 105, 104, 113,
	0, 0, 0, 96, 0, 144, 134, 164, 0, 135,
	143, 117, 156, 139, 163, 194, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 178, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 0,
	0, 150, 166, 179, 0, 0, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 115, 176, 140, 102, 167,
	132, 0, 0, 0, 587, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 585, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 84,
	0, 115, 176, 140, 102, 167, 565, 100, 0, 0,
	0, 0, 114, 0, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 138, 0, 0,
	152, 105, 104, 113, 0, 0, 0, 96, 0, 144,
	134, 164, 0, 135, 143, 117, 156, 139, 163, 194,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 178, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 0, 0, 150, 166, 179, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 0, 0, 0, 0, 132, 0, 84, 0, 115,
	176, 140, 102, 167, 100, 0, 0, 0, 0, 114,
	0, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 138, 0, 0, 152, 105, 104,
	113, 0, 0, 0, 96, 0, 144, 134, 164, 0,
	135, 143, 117, 156, 139, 163, 194, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 178, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 179, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 84, 0, 115, 176, 140, 102,
	167, 100, 0, 0, 0, 0, 114, 0, 116, 0,
	0, 149, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 193, 0, 0, 0,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 0, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 0, 0, 150,
	166, 179, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 84, 0, 115, 176, 140, 102, 167, 100, 0,
	0, 0, 0, 114, 0, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	83, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	194, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 178, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 179, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	115, 176, 140, 102, 167,
}
var yyPact = [...]int{

	136, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 886, 920, -1000, -1000, -1000, -1000,
	-1000, -1000, 687, 6766, 86, 105, 16, 9064, 101, 305,
	9291, -1000, 17, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6, 9291, 522, 604, -1000, -1000, -1000, -1000, -1000, 870,
	879, 686, 846, 782, -1000, 5147, 70, 7919, 8837, 4203,
	-1000, 511, 98, 9291, -148, 9291, 67, 67, 67, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	100, 9291, -1000, 9291, 66, 509, 66, 66, 66, 9291,
	-1000, 146, -1000, -1000, -1000, 9291, 501, 815, 75, 2709,
	2709, 2709, 2709, 22, 2709, -88, -74, 701, -1000, -1000,
	-1000, -1000, 2709, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9291, 889, 690, 384, 817, 5858, 5858,
	886, -1000, 604, -1000, -1000, -1000, 809, -1000, -1000, 266,
	905, -1000, 7002, 135, -1000, 5858, 1690, 469, 469, 469,
	125, 302, -1000, -1000, -1000, 6312, 6312, 6312, 6312, 6312,
	6312, 6312, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5622, 469,
	469, 469, 469, 469, 469, 469, 469, 5858, 469, 469,
	469, 469, 469, 469, 469, 469, 469, 469, 469, 469,
	469, 8610, 625, 726, -1000, -1000, -1000, 843, 7229, 8382,
	9291, 633, -1000, 619, 3954, -101, -1000, -1000, -1000, 206,
	8146, -1000, -1000, -1000, 811, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 535, -1000,
	1702, 499, 2709, 92, 643, 492, 239, 488, 9291, 9291,
	2709, 81, 9291, 841, 700, 9291, 485, 474, -1000, 3456,
	-1000, 2709, 2709, 2709, 2709, 2709, 2709, 2709, 2709, -1000,
	-1000, -1000, -1000, -1000, -1000, 2709, 2709, -1000, -90, -69,
	-1000, 9291, -1000, -1000, 93, 93, 9291, -1000, -1000, -1000,
	915, 167, 466, 132, 628, -1000, 455, 870, 384, 782,
	7456, 712, -1000, -1000, 9291, -1000, 5858, 5858, 419, -1000,
	9291, -1000, 3207, 172, 6312, 283, 244, 6312, 6312, 6312,
	6312, 6312, 6312, 6312, 6312, 6312, 6312, 6312, 6312, 6312,
	6312, 6312, 323, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 467, 4439, -1000, 604, 981, 981, -1000, -1000, 151,
	151, 151, 151, 151, 151, 6539, 384, 528, 229, 5622,
	5147, 5147, 5858, 5858, 9291, 9291, 5147, 848, 214, 229,
	9291, -1000, 384, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5147, 5147, 5147, 5147, 154, 9291, -1000, 9291, 7919, 7919,
	7919, 7919, 7919, -1000, 759, 757, -1000, 760, 758, 775,
	9291, -1000, 520, 7229, 149, 469, -1000, 9291, -1000, 45,
	545, 7919, 9291, -1000, -1000, 3705, 619, -101, 606, -1000,
	-94, -127, 5383, 140, -1000, -1000, -1000, 2460, 199, 250,
	-56, -1000, -1000, -1000, 605, -1000, 605, 605, 605, 605,
	-22, -22, -22, -22, -1000, -1000, -1000, -1000, -1000, 675,
	672, -1000, 605, 605, 605, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 659, 659, 659, 631, 631, 689, -1000, 9291, -168,
	439, 2709, 838, 2709, -1000, 63, -1000, 9291, -1000, -1000,
	9291, 2709, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 248, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	609, -1000, -1000, 789, 5858, 5858, 3456, 5858, -1000, -1000,
	-1000, 817, -1000, 848, 862, -1000, 801, 799, 5147, -1000,
	-1000, 172, 192, -1000, -1000, 275, -1000, -1000, -1000, -1000,
	131, 469, -1000, -1000, 1614, -1000, -1000, -1000, -1000, 283,
	6312, 6312, 6312, 256, 1614, 1650, 408, 1731, 151, 370,
	370, 175, 175, 175, 175, 175, 660, 660, -1000, -1000,
	-1000, 384, 384, 5147, 607, -1000, 302, -1000, 302, -1000,
	-1000, 5858, -1000, 384, 508, 508, 363, 468, 654, -1000,
	128, 600, 508, 5147, 245, -1000, 5858, 384, -1000, 508,
	384, 508, 508, 636, 796, 469, -1000, 694, -1000, 205,
	726, 642, 699, 1209, -1000, -1000, -1000, -1000, 731, -1000,
	723, -1000, -1000, -1000, -1000, -1000, 97, 95, 94, 9291,
	-1000, 903, 7919, 586, -1000, -1000, 606, -101, -99, -1000,
	-1000, -1000, 229, -1000, 360, 594, 2211, -1000, -1000, -1000,
	-1000, -1000, 638, 827, 183, 184, 405, -1000, -1000, 820,
	-1000, 262, -59, -1000, -1000, 349, -22, -22, -1000, -1000,
	140, 808, 140, 140, 140, 369, 369, -1000, -1000, -1000,
	-1000, 348, -1000, -1000, -1000, 335, -1000, 698, 9291, 2709,
	-1000, 3456, -1000, -1000, -1000, -1000, -1000, -1000, 682, 271,
	246, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44, -1000, 2709, -1000, 257, 9291, 9291, 9291,
	779, 229, 229, 123, -1000, -1000, 9291, -1000, -1000, -1000,
	-1000, 593, -1000, -1000, -1000, 2958, 5147, -1000, 256, 1614,
	1585, -1000, 6312, 6312, -1000, -1000, 508, 5147, 229, -1000,
	-1000, -1000, 56, 323, 56, 6312, 6312, 3456, 6312, 6312,
	-162, 570, 208, -1000, 5858, 333, -1000, -1000, -1000, -1000,
	-1000, 696, 9291, 469, -1000, 7229, -1000, 9291, 886, 9291,
	5858, 5858, -1000, -1000, 5858, 635, -1000, 5858, -1000, -1000,
	-1000, 469, 469, 469, 444, -1000, 886, 586, -1000, -1000,
	-1000, -119, -132, -1000, -1000, -1000, 2460, -1000, 2460, 9291,
	-1000, 402, 394, -1000, -1000, 692, 108, -1000, -1000, -1000,
	445, 140, 140, -1000, 207, -1000, -1000, -1000, 505, -1000,
	498, 581, 480, 9291, -1000, -1000, 572, -1000, 202, -1000,
	-1000, 9291, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9291, 9291, -1000, -1000, -1000, -1000,
	-1000, 9291, -1000, -1000, 368, 5858, -1000, -1000, -1000, -1000,
	3456, -1000, 903, 7919, -1000, -1000, 384, -1000, 6312, 1614,
	1614, -1000, -1000, 384, 605, 605, -1000, 605, 631, -1000,
	605, -2, 605, -4, 469, 384, 384, 1337, 1569, -1000,
	621, 1435, 469, -159, -1000, 229, 5858, -182, 829, 558,
	549, -1000, -1000, 4911, 384, 478, 119, 444, 870, -1000,
	229, 229, 229, 9291, 229, 9291, 9291, 9291, 7692, 9291,
	870, -1000, -1000, -1000, -1000, 2211, -1000, 428, -1000, 605,
	-1000, -1000, -52, 913, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -22, 365, -22, 317, -1000,
	311, 2709, 3456, 2460, -1000, 523, -1000, -1000, -1000, -1000,
	831, -1000, 229, 894, 571, -1000, 1614, -1000, -1000, 104,
	-1000, -1000, -1000, -1000, -1000, -1000, 310, -1000, -1000, -1000,
	6312, 6312, -1000, 6312, 6312, 6312, 384, 351, 229, -1000,
	4675, 826, -1000, 469, -1000, -1000, 637, 9291, 9291, -1000,
	-1000, 423, -1000, 409, 409, 409, 149, -1000, -1000, 165,
	9291, -1000, 181, -1000, -137, 140, -1000, 140, 420, 410,
	-1000, -1000, -1000, 9291, 469, 890, 878, -1000, -1000, 384,
	1408, 1408, 1408, 1408, 15, -1000, -1000, -1000, 537, 909,
	-1000, 469, -1000, 604, 116, -1000, 9291, -1000, -1000, -1000,
	-1000, -1000, 165, -1000, 385, 201, 334, -1000, 247, 825,
	-1000, 823, -1000, -1000, -1000, -1000, -1000, 399, 43, -1000,
	5858, 5858, -1000, -1000, -1000, -1000, -1000, 384, 36, -171,
	9291, 549, 384, 9291, -1000, -1000, -1000, 308, -1000, -1000,
	-1000, 324, -1000, -1000, 643, 383, -1000, 9291, 229, 537,
	-1000, 769, -166, -175, 526, -1000, -1000, -1000, -1000, -168,
	-1000, 43, 795, -1000, 764, -1000, -1000, -1000, 35, -169,
	24, -172, 469, -179, 6085, -1000, 1408, 384, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1185, 21, 63, 1184, 1183, 1182, 933, 931, 929,
	1181, 1180, 1179, 1178, 1177, 1176, 1172, 1171, 1170, 1166,
	1163, 1162, 1159, 1157, 1156, 1155, 1151, 126, 1145, 1143,
	1142, 59, 1141, 62, 1140, 1139, 29, 139, 33, 57,
	134, 1138, 37, 64, 61, 1137, 42, 1134, 1123, 67,
	1122, 50, 1121, 1115, 1269, 1113, 1110, 14, 28, 1108,
	1107, 1104, 1102, 60, 474, 1099, 1098, 1096, 1095, 1094,
	1093, 44, 3, 6, 25, 15, 1092, 577, 55, 1086,
	39, 1083, 1081, 1079, 1078, 36, 1077, 45, 1075, 23,
	43, 1074, 13, 49, 26, 24, 8, 66, 48, 1072,
	20, 56, 31, 1070, 1063, 365, 1062, 1060, 1058, 1057,
	1056, 1055, 153, 328, 1054, 1053, 1050, 1047, 19, 1035,
	0, 396, 58, 1034, 1033, 1031, 1059, 54, 53, 16,
	1030, 40, 171, 18, 1029, 1028, 46, 1027, 1026, 1022,
	1017, 1015, 1013, 1012, 279, 1011, 1010, 1008, 27, 7,
	1007, 1006, 51, 11, 1003, 1002, 1001, 35, 47, 998,
	32, 996, 993, 965, 964, 17, 10, 961, 9, 959,
	5, 957, 956, 1, 955, 12, 954, 2, 951, 4,
	30, 950, 949, 65, 947, 946, 937, 496, 100, 936,
	935, 94,
}
var yyR1 = [...]int{

	0, 185, 186, 186, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 189, 189, 49, 49, 93, 93, 10,
	10, 10, 10, 98, 98, 102, 102, 102, 103, 103,
	103, 103, 134, 134, 11, 11, 11, 11, 11, 11,
	11, 179, 179, 178, 177, 177, 176, 176, 175, 16,
	162, 163, 163, 163, 158, 137, 137, 137, 137, 140,
	140, 138, 138, 138, 138, 138, 138, 138, 139, 139,
	139, 139, 139, 141, 141, 141, 141, 141, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 143, 143, 143, 143, 143, 143, 143,
	143, 157, 157, 144, 144, 152, 152, 153, 153, 153,
	150, 150, 151, 151, 154, 154, 154, 145, 145, 145,
	145, 145, 145, 145, 147, 147, 155, 155, 148, 148,
	148, 149, 149, 149, 156, 156, 156, 156, 156, 146,
	146, 159, 159, 171, 171, 170, 170, 170, 161, 161,
	167, 167, 167, 167, 167, 160, 160, 169, 169, 168,
	164, 164, 164, 165, 165, 165, 166, 166, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 174, 172,
	172, 173, 173, 13, 14, 14, 14, 14, 14, 15,
	15, 17, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 110, 110, 107, 107,
	108, 108, 109, 109, 109, 111, 111, 111, 135, 135,
	135, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 24, 25, 25, 183, 183, 183, 183, 183,
	183, 26, 26, 184, 184, 190, 27, 28, 28, 29,
	29, 29, 33, 33, 33, 31, 31, 32, 32, 38,
	38, 37, 37, 39, 39, 39, 39, 123, 123, 123,
	122, 41, 41, 42, 42, 43, 43, 44, 44, 44,
	56, 56, 92, 92, 94, 94, 45, 45, 45, 45,
	46, 46, 47, 47, 48, 48, 130, 130, 129, 129,
	129, 128, 50, 50, 50, 52, 51, 51, 51, 51,
	53, 53, 55, 55, 54, 54, 57, 57, 57, 57,
	58, 58, 40, 40, 40, 40, 40, 40, 40, 106,
	106, 60, 60, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 70, 70, 70, 70, 70, 70, 61,
	61, 61, 61, 61, 61, 61, 36, 36, 71, 71,
	71, 77, 72, 72, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 68, 68, 68, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 67, 67, 67, 67, 67, 67, 67,
	67, 191, 191, 69, 69, 69, 69, 34, 34, 34,
	34, 34, 133, 133, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 81, 81,
	35, 35, 79, 79, 80, 82, 82, 78, 78, 78,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	181, 65, 65, 65, 83, 83, 84, 84, 85, 85,
	86, 86, 87, 88, 88, 88, 89, 89, 89, 89,
	90, 90, 90, 62, 62, 62, 62, 62, 62, 91,
	91, 91, 91, 95, 95, 73, 73, 75, 75, 74,
	76, 182, 182, 182, 96, 96, 100, 97, 97, 101,
	101, 101, 99, 99, 99, 125, 125, 104, 104, 112,
	112, 113, 113, 105, 105, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 116, 116,
	117, 117, 117, 124, 124, 120, 120, 120, 121, 121,
	126, 127, 127, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 187, 188, 131, 132, 132, 132,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 8, 4, 6, 5, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 0, 2, 2,
	2, 2, 2, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 3, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 6, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 4, 3, 4, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 3, 4, 4, 1, 1, 1, 1, 1,
	1, 2, 4, 1, 3, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 4, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 0, 2, 2, 1, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -185, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 113, 114, 116, 115, 141, 117, 134,
	49, 153, 154, 156, 157, 25, 135, 136, 139, 140,
	158, 159, 160, -187, 8, 239, 53, -186, 255, -85,
	15, -29, 5, -27, -190, -27, -27, -27, -27, -27,
	-162, 53, -117, 122, 71, 149, 231, 119, 120, 126,
	-120, 56, -119, 59, 247, 153, 167, 161, 188, 180,
	178, 181, 218, 66, 156, 227, 137, 176, 172, 170,
	27, 193, 252, 171, 132, 131, 194, 198, 219, 165,
	166, 221, 192, 133, 32, 249, 34, 145, 222, 196,
	191, 187, 190, 164, 186, 38, 200, 199, 201, 217,
	183, 173, 18, 225, 140, 143, 195, 197, 127, 147,
	251, 223, 169, 144, 139, 226, 157, 220, 229, 37,
	205, 163, 130, 154, 151, 184, 146, 174, 175, 189,
	162, 185, 155, 148, 141, 228, 206, 253, 182, 179,
	152, 150, 210, 211, 212, 213, 250, 224, 177, 207,
	-105, 122, 124, 120, 120, 121, 122, 231, 119, 120,
	-54, -126, -120, 122, 149, 120, 107, 181, 113, 208,
	121, 32, 147, -135, 120, 155, -107, 150, 210, 211,
	212, 213, 56, 220, 219, 214, -126, 155, -131, -131,
	-131, -131, -131, 159, -126, 56, -2, -89, 17, 16,
	-5, -3, -187, 6, 20, 21, -33, 39, 40, -28,
	-39, 98, -40, -126, -59, 73, -64, 29, -120, 23,
	-78, -63, -60, -76, -77, 107, 108, 96, 97, 104,
	74, 109, -68, -66, -67, -69, 59, 58, 67, 60,
	61, 62, 63, 68, 57, 69, 70, -74, -187, 43,
	44, 240, 241, 242, 243, 246, 244, 76, 33, 230,
	238, 237, 236, 234, 235, 232, 233, 125, 231, 102,
	239, -105, -42, -43, -44, -45, -56, -77, -187, -54,
	11, -49, -54, -97, -134, 155, -101, 220, 219, -121,
	-99, -120, -118, 218, 181, 217, 118, 72, 22, 24,
	203, 75, 107, 16, 76, 106, 240, 113, 47, 232,
	233, 230, 242, 243, 231, 208, 29, 10, 25, 135,
	21, 100, 115, 79, 80, 138, 23, 136, 70, 19,
	50, 11, 13, 14, 125, 124, 91, 121, 45, 8,
	109, 26, 88, 41, 28, 43, 89, 17, 234, 235,
	31, 246, 142, 102, 48, 35, 73, 68, 51, 71,
	15, 46, 90, 116, 239, 44, 119, 6, 245, 30,
	134, 42, 120, 209, 78, 123, 69, 5, 126, 9,
	49, 52, 236, 237, 238, 33, 77, 12, -163, -158,
	56, 121, -54, 239, -120, -113, 125, -113, -113, 120,
	-54, -54, -112, 125, 56, -112, -112, -112, -54, 110,
	-54, 56, 30, 231, 56, 147, 120, 148, 122, -132,
	-187, -121, -132, -132, -132, 151, 152, -132, 221, -108,
	215, 51, -132, -126, 11, 22, 52, -188, 55, -90,
	19, 31, -40, -126, -86, -87, -40, -85, -2, -27,
	35, -31, 21, 65, 11, -123, 72, 71, 88, -122,
	22, -120, 110, -40, -61, 91, 73, 89, 90, 75,
	93, 92, 103, 96, 97, 98, 99, 100, 101, 102,
	94, 95, 106, 81, 82, 83, 84, 85, 86, 87,
	-106, -187, -187, -77, -187, 111, 112, -181, 64, -64,
	-64, -64, -64, -64, -64, -64, -2, -72, -40, -187,
	-187, -187, -187, -187, -187, -187, -187, -187, -81, -40,
	-187, -191, -187, -191, -191, -191, -191, -191, -191, -191,
	-187, -187, -187, -187, -55, 26, -54, 30, 54, -50,
	-52, -51, -53, 41, 45, 47, 42, 43, 44, 48,
	-130, 22, -42, -187, -129, 143, -128, 22, -126, -54,
	-49, -189, 54, 11, 52, 54, -97, 155, -98, -102,
	221, 223, 81, -125, -120, 29, 30, 55, 54, -137,
	-140, -142, -141, -143, -138, -139, 178, 179, 107, 182,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	30, 137, 174, 175, 176, 177, 194, 195, 196, 197,
	198, 199, 200, 201, 161, 162, 163, 164, 165, 166,
	167, 169, 170, 171, 172, 173, 56, -132, 122, -179,
	52, 56, 73, 56, -54, -54, -132, 123, -54, 23,
	51, -54, 56, 56, -127, -126, -118, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, 222, -110, 209,
	216, -54, -183, -3, -7, -9, -8, 56, 59, -183,
	-184, -126, 9, 91, 54, 18, 110, 54, -88, 24,
	25, -89, -188, -33, -65, -120, 60, 63, -32, 42,
	-54, -40, -40, -70, 68, 73, 69, 70, -122, 98,
	-127, -121, -118, -120, -64, -71, -74, -77, 64, 91,
	89, 90, 75, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -133, 56,
	59, 56, -38, 21, -37, -39, -63, 59, -63, -120,
	-188, 54, -188, -2, -37, -37, -40, -40, -78, -120,
	-126, -78, -37, -31, -79, -80, 77, -78, -188, -37,
	-38, -37, -37, -93, 29, 143, -54, -96, -100, -78,
	-43, -44, -44, -43, -44, 41, 41, 41, 46, 41,
	46, 41, -51, -126, -188, -57, 49, 124, 50, -187,
	-128, -93, 52, -42, -54, -101, -98, 54, 222, 224,
	225, 51, -40, -149, 106, -164, -165, -166, -121, 60,
	-158, -159, -167, 127, 130, 126, -160, 121, 28, -154,
	68, 73, -150, 206, -144, 53, -144, -144, -144, -144,
	-148, 181, -148, -148, -148, 53, 53, -144, -144, -144,
	-152, 53, -152, -152, -153, 53, -153, -124, 52, -54,
	-177, 250, -178, 56, -132, 23, -132, -114, 118, 115,
	116, -174, 114, 203, 181, 66, 29, 15, 240, 143,
	253, 56, 144, -54, -54, -132, -109, 11, 91, 54,
	37, -40, -40, -127, -87, -90, -104, 19, 11, 33,
	33, -37, 68, 69, 70, 110, -187, -71, -64, -64,
	-64, -36, 138, 72, -188, -188, -37, 54, -40, -188,
	-188, -188, 54, 52, 22, 54, 11, 110, 54, 11,
	-188, -37, -82, -80, 79, -40, -188, -188, -188, -188,
	-188, -62, 30, 33, -2, -187, 33, -187, -58, 54,
	12, 81, -47, -46, 51, 52, -48, 51, -46, 41,
	41, 121, 121, 121, -94, -120, -58, -42, -58, -102,
	-103, 226, 223, 229, 56, 59, 54, -166, 81, 53,
	28, -160, -160, 56, 56, -145, 29, 68, -151, 207,
	60, -148, -148, -149, 30, -149, -149, -149, -157, 59,
	-157, 60, 60, 51, -120, -132, -176, -175, -121, -131,
	-180, 149, 128, 129, 132, 131, 56, 121, 28, 127,
	130, 143, 126, -180, 149, -115, -116, 123, 22, 121,
	28, 143, -132, -111, 89, 12, -126, -126, -126, 38,
	110, -54, -41, 11, 98, -121, -38, -36, 72, -64,
	-64, -188, -39, -136, 107, 178, 137, 176, 172, 192,
	183, 205, 174, 206, 179, -133, -136, -64, -64, -121,
	-64, -64, 247, -85, 80, -40, 78, -95, 51, -96,
	-73, -75, -74, -187, -2, -91, -120, -94, -85, -100,
	-40, -40, -40, 53, -40, -187, -187, -187, -188, 54,
	-85, -58, 223, 227, 228, -165, -166, -169, -168, -120,
	56, 56, -147, 51, 59, 60, 61, 68, 230, 67,
	55, -149, -149, 56, 107, 55, 54, 55, 54, 55,
	54, -54, 54, 81, -131, -120, -131, -120, -54, -131,
	-120, 59, -40, -58, -42, -188, -64, -188, -144, -144,
	-144, -153, -144, 166, -144, 166, -187, -188, -188, -188,
	54, 19, -188, 54, 19, -187, -35, 245, -40, -182,
	254, 27, -95, 54, -188, -188, -188, 54, 110, -188,
	-89, -92, -120, -92, -92, -92, -129, -120, -89, 55,
	54, -144, -155, 203, 9, -148, 59, -148, 60, 60,
	-132, -175, -166, 53, 26, -83, 13, -148, 56, 60,
	-64, -64, -64, -64, -64, -188, 59, 98, -72, 28,
	-75, 33, -2, -187, -120, -120, 54, 55, -188, -188,
	-188, -57, -171, -170, 52, 133, 66, -168, -156, 127,
	28, 126, 230, -149, -149, 55, 55, -92, -187, -84,
	14, 16, -188, -188, -188, -188, -188, -34, 91, 250,
	9, -73, -2, 110, -120, -170, 56, -161, 81, 59,
	-146, 66, 28, 28, 55, -172, -173, 143, -40, -72,
	-188, 248, 48, 251, -96, -188, -120, 60, 59, -179,
	-188, 54, -120, 38, 249, 252, -177, -173, 33, 38,
	145, 250, 146, 251, -187, 252, -64, 142, -188, -188,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 528, 0, 295, 295, 295, 295,
	295, 295, 0, 600, 583, 0, 0, 0, 0, -2,
	272, 273, 0, 275, 276, 805, 805, 805, 805, 805,
	0, 0, 0, 0, 37, 38, 803, 1, 3, 536,
	0, 0, 299, 302, 297, 0, 583, 0, 0, 0,
	64, 0, 0, 792, 0, 793, 581, 581, 581, 601,
	602, 605, 606, 607, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	0, 0, 584, 0, 579, 0, 579, 579, 579, 0,
	230, 364, 610, 792, 793, 0, 0, 0, 0, 806,
	806, 806, 806, 0, 806, 0, 260, 249, 251, 252,
	253, 254, 806, 269, 270, 259, 271, 274, 277, 278,
	279, 280, 281, 0, 0, 291, 30, 540, 0, 0,
	528, 32, 0, 295, 300, 301, 305, 303, 304, 296,
	0, 313, 317, 0, 372, 0, 377, 379, -2, 0,
	414, 415, 416, 417, 418, 0, 0, 0, 0, 0,
	0, 0, 441, 442, 443, 444, -2, 511, 512, 513,
	514, 515, 516, 517, 518, 381, 382, 560, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 498, 0, 471,
	471, 471, 471, 471, 471, 471, 471, 0, 0, 0,
	0, 0, 0, 323, 325, 326, 327, 346, 0, 348,
	0, 0, 45, 49, 0, 783, 567, -2, -2, 0,
	0, 608, 609, -2, 712, -2, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 0, 81,
	0, 0, 806, 0, 71, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 0, 0, 0, 229, 0,
	231, 806, 806, 806, 806, 806, 806, 806, 806, 240,
	807, 808, 241, 242, 243, 806, 806, 245, 0, 0,
	261, 0, 255, 282, 0, 0, 0, 31, 804, 25,
	0, 0, 537, 0, 529, 530, 533, 536, 30, 302,
	0, 307, 306, 298, 0, 314, 0, 0, 0, 318,
	0, 320, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 399, 400, 401, 402, 403, 404, 405,
	378, 0, 309, 392, 0, 0, 0, 519, 520, 434,
	435, 436, 437, 438, 439, 0, 30, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 305, 0, 499,
	0, 463, 0, 464, 465, 466, 467, 468, 469, 470,
	0, 309, 0, 0, 47, 0, 363, 0, 0, 0,
	0, 0, 0, 352, 0, 0, 355, 0, 0, 0,
	0, 347, 0, 0, 366, 756, 349, 0, 351, -2,
	0, 0, 0, 43, 44, 0, 50, 783, 52, 53,
	0, 0, 0, 161, 575, 576, 573, 190, 0, 144,
	140, 86, 87, 88, 133, 90, 133, 133, 133, 133,
	158, 158, 158, 158, 116, 117, 118, 119, 120, 0,
	0, 103, 133, 133, 133, 107, 123, 124, 125, 126,
	127, 128, 129, 130, 91, 92, 93, 94, 95, 96,
	97, 135, 135, 135, 137, 137, 603, 66, 0, 74,
	0, 806, 0, 806, 79, 0, 205, 0, 224, 580,
	0, 806, 227, 228, 365, 611, 612, 232, 233, 234,
	235, 236, 237, 238, 239, 244, 248, 246, 262, 256,
	257, 250, 283, 285, 286, 287, 288, 289, 290, 284,
	292, 293, 541, 0, 0, 0, 0, 0, 532, 534,
	535, 540, 33, 305, 0, 521, 0, 0, 0, 308,
	28, 373, 374, 376, 393, 0, 395, 397, 319, 315,
	0, 508, -2, -2, 383, 384, 408, 409, 410, 0,
	0, 0, 0, 406, 388, 0, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 433, 482,
	483, 0, 0, 0, 310, 311, 431, 510, 432, 440,
	411, 0, 559, 30, 0, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 505, 502, 0, 0, 472, 0,
	0, 0, 0, 0, 0, 0, 362, 370, 564, 0,
	324, 342, 344, 0, 339, 353, 354, 356, 0, 358,
	0, 360, 361, 328, 329, 330, 0, 0, 0, 0,
	350, 370, 0, 370, 46, 568, 51, 0, 0, 56,
	57, 569, 570, 571, 0, 80, 191, 193, 196, 197,
	82, 83, 0, 0, 0, 0, 0, 185, 186, 147,
	145, 0, 142, 141, 89, 0, 158, 158, 110, 111,
	161, 0, 161, 161, 161, 0, 0, 104, 105, 106,
	98, 0, 99, 100, 101, 0, 102, 0, 0, 806,
	68, 0, 72, 73, 69, 582, 70, 805, 0, 0,
	595, 206, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 0, 223, 806, 226, 265, 0, 0, 0,
	0, 538, 539, 0, 531, 26, 0, 577, 578, 522,
	523, 321, 394, 396, 398, 0, 309, 385, 406, 389,
	0, 386, 0, 0, 380, 445, 0, 0, 413, -2,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 528, 0, 503, 0, 0, 462, 473, 474, 475,
	476, 553, 0, 0, -2, 0, 36, 0, 528, 0,
	0, 0, 336, 343, 0, 0, 337, 0, 338, 357,
	359, 0, 0, 0, 0, 334, 528, 370, 42, 54,
	55, 0, 0, 61, 162, 163, 0, 194, 0, 0,
	180, 0, 0, 183, 184, 154, 0, 146, 85, 143,
	0, 161, 161, 112, 0, 113, 114, 115, 0, 131,
	0, 0, 0, 0, 604, 67, 75, 76, 0, 198,
	805, 0, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 805, 0, 0, 805, 596, 597, 598,
	599, 0, 225, 247, 0, 0, 263, 264, 294, 542,
	0, 27, 370, 0, 316, 509, 0, 387, 0, 407,
	390, 446, 312, 0, 133, 133, 487, 133, 137, 490,
	133, 492, 133, 495, 0, 0, 0, 0, 0, 508,
	0, 0, 0, 500, 461, 506, 0, 561, 0, 553,
	543, 555, 557, 0, 30, 0, 549, 0, 536, 565,
	371, 566, 340, 0, 345, 0, 0, 0, 348, 0,
	536, 41, 58, 59, 60, 192, 195, 0, 187, 133,
	181, 182, 156, 0, 148, 149, 150, 151, 152, 153,
	134, 108, 109, 159, 160, 158, 0, 158, 0, 138,
	0, 806, 0, 0, 199, 0, 200, 202, 203, 204,
	0, 266, 267, 524, 322, 447, 391, 450, 484, 158,
	488, 489, 491, 493, 494, 496, 0, 452, 451, 453,
	0, 0, 456, 0, 0, 0, 0, 0, 504, 34,
	0, 0, 35, 0, 558, -2, 0, 0, 0, 48,
	39, 0, 332, 0, 0, 0, 366, 335, 40, 172,
	0, 189, 164, 157, 0, 161, 132, 161, 0, 0,
	65, 77, 78, 0, 0, 526, 0, 485, 486, 0,
	0, 0, 0, 0, 477, 460, 501, 562, 563, 0,
	556, 0, -2, 0, 551, 550, 0, 341, 367, 368,
	369, 331, 171, 173, 0, 178, 0, 188, 169, 0,
	166, 168, 155, 121, 122, 136, 139, 0, 0, 29,
	0, 0, 497, 454, 455, 457, 458, 0, 0, 0,
	0, 546, 30, 0, 333, 174, 175, 0, 179, 177,
	84, 0, 165, 167, 71, 0, 219, 0, 527, 525,
	459, 0, 0, 0, 554, -2, 552, 176, 170, 74,
	218, 0, 0, 478, 0, 481, 201, 220, 0, 479,
	0, 0, 0, 0, 0, 480, 0, 0, 221, 222,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 255,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:353
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:361
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:365
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:371
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:378
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:398
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:405
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:418
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:428
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:434
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:438
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:444
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:468
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:472
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:477
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:481
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:499
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:551
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:557
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:562
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:567
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:571
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:592
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:602
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:607
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:623
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:629
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:635
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:642
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:654
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:664
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:675
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:686
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:883
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:888
		{
			yyVAL.optVal = nil
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:892
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:897
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:901
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:909
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:919
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:927
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:936
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:946
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:954
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:959
		{
			yyVAL.optVal = nil
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:963
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:971
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:975
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = nil
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1001
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1006
		{
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1014
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1032
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1036
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1040
		{
			yyVAL.colKeyOpt = colKey
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1048
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1053
		{
			yyVAL.optVal = nil
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1063
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1067
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1073
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1077
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1083
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1098
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1108
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1150
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1155
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = yyDollar[1].str
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1179
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1185
		{
			if yyDollar[1].colIdent.NeedQuotes() {
				yyVAL.str = "'" + yyDollar[1].colIdent.String() + "'"
			} else {
				yyVAL.str = yyDollar[1].colIdent.String()
			}

		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1200
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1204
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1208
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1212
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1225
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1235
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1240
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1245
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1249
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1268
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1278
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1284
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 222:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1288
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1294
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1300
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 225:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1308
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1313
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1325
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1387
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1391
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1407
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1451
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1457
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1467
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = "extended "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1477
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1481
		{
			yyVAL.str = "full "
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1487
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1491
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1501
		{
			yyVAL.showFilter = nil
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1505
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1509
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1519
		{
			yyVAL.str = SessionStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1523
		{
			yyVAL.str = GlobalStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Begin{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Begin{}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &Commit{}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Rollback{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &OtherRead{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &OtherRead{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, PreparedStatementQuery: yyDollar[4].preparedQuery}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1599
		{
			yyVAL.preparedQuery = yyDollar[1].selStmt.(*Select)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1603
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Insert)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Delete)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.preparedQuery = yyDollar[1].statement.(*Update)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1615
		{
			yyVAL.preparedQuery = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			statement, err := NewPreparedQueryFromString(string(yyDollar[1].bytes))
			if statement == nil {
				yylex.Error("unsupported type of prepared query")
				return 1
			}
			if err != nil {
				yylex.Error("syntax error in prepared query")
				return 1
			}
			yyVAL.preparedQuery = statement
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1648
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1653
		{
			setAllowComments(yylex, true)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1657
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1663
		{
			yyVAL.bytes2 = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1667
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.str = UnionStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1677
		{
			yyVAL.str = UnionAllStr
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1681
		{
			yyVAL.str = UnionDistinctStr
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1686
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.str = SQLCacheStr
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = DistinctStr
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1708
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.str = StraightJoinHint
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1717
		{
			yyVAL.selectExprs = nil
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1741
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1745
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1749
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1754
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1762
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1770
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1780
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1784
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1794
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1798
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1802
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1808
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1812
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1828
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1832
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1845
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1849
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1853
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1863
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1865
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1869
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1875
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1877
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1880
		{
			yyVAL.empty = struct{}{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1885
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1889
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1893
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = JoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1907
		{
			yyVAL.str = JoinStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1911
		{
			yyVAL.str = JoinStr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1917
		{
			yyVAL.str = StraightJoinStr
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1923
		{
			yyVAL.str = LeftJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1927
		{
			yyVAL.str = LeftJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1931
		{
			yyVAL.str = RightJoinStr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = RightJoinStr
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1941
		{
			yyVAL.str = NaturalJoinStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1945
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1955
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1969
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1974
		{
			yyVAL.indexHints = nil
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1978
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1982
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1986
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1991
		{
			yyVAL.expr = nil
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1995
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2005
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2009
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2025
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = ""
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2063
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2067
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2071
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2075
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2079
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2083
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2087
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = IsNullStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = IsNotNullStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.str = IsTrueStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2105
		{
			yyVAL.str = IsNotTrueStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.str = IsFalseStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2113
		{
			yyVAL.str = IsNotFalseStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = EqualStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = LessThanStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = GreaterThanStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = LessEqualStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.str = GreaterEqualStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.str = NotEqualStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2148
		{
			yyVAL.expr = nil
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2178
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2278
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2286
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2308
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 457:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 458:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 459:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2478
		{
			yyVAL.str = BooleanModeStr
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2482
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2486
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2490
		{
			yyVAL.str = QueryExpansionStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2496
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2532
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2540
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2544
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2560
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = nil
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2574
		{
			yyVAL.str = string("")
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2584
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2588
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2594
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = nil
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2613
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2617
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &NullVal{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2665
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2673
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2691
		{
			yyVAL.exprs = nil
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2695
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2709
		{
			yyVAL.orderBy = nil
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2713
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2719
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2723
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2729
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2734
		{
			yyVAL.str = AscScr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2738
		{
			yyVAL.str = AscScr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2742
		{
			yyVAL.str = DescScr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2747
		{
			yyVAL.limit = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2751
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2755
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2759
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2764
		{
			yyVAL.str = ""
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2768
		{
			yyVAL.str = ForUpdateStr
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2772
		{
			yyVAL.str = ShareModeStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2785
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2798
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2802
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 548:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2806
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2813
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2817
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2821
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2825
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2830
		{
			yyVAL.updateExprs = nil
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2834
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2844
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2850
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2860
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2875
		{
			yyVAL.returning = nil
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2880
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2896
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2902
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2912
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2918
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2922
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2926
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2933
		{
			yyVAL.bytes = []byte("charset")
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &Default{}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2953
		{
			yyVAL.byt = 0
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2955
		{
			yyVAL.byt = 1
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2958
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2960
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2963
		{
			yyVAL.str = ""
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2965
		{
			yyVAL.str = IgnoreStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2969
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2971
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2975
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2977
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2979
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2981
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2985
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2990
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3003
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3010
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3012
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3016
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3020
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3024
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), true)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(yyDollar[1].colIdent.String(), yyDollar[1].colIdent.NeedQuotes())
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			decNesting(yylex)
		}
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3274
		{
			forceEOF(yylex)
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3279
		{
			forceEOF(yylex)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			forceEOF(yylex)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3287
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
