// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                int
	empty              struct{}
	statement          Statement
	selStmt            SelectStatement
	ddl                *DDL
	ins                *Insert
	byt                byte
	bytes              []byte
	bytes2             [][]byte
	str                string
	strs               []string
	selectExprs        SelectExprs
	selectExpr         SelectExpr
	columns            Columns
	partitions         Partitions
	colName            *ColName
	tableExprs         TableExprs
	tableExpr          TableExpr
	joinCondition      JoinCondition
	tableName          TableName
	tableNames         TableNames
	indexHints         *IndexHints
	returning          Returning
	expr               Expr
	exprs              Exprs
	boolVal            BoolVal
	colTuple           ColTuple
	values             Values
	valTuple           ValTuple
	subquery           *Subquery
	whens              []*When
	when               *When
	orderBy            OrderBy
	order              *Order
	limit              *Limit
	updateExprs        UpdateExprs
	setExprs           SetExprs
	updateExpr         *UpdateExpr
	setExpr            *SetExpr
	colIdent           ColIdent
	tableIdent         TableIdent
	usingInExecuteList UsingInExecuteList
	convertType        *ConvertType
	aliasedTableName   *AliasedTableExpr
	TableSpec          *TableSpec
	columnType         ColumnType
	colKeyOpt          ColumnKeyOption
	optVal             *SQLVal
	LengthScaleOption  LengthScaleOption
	columnDefinition   *ColumnDefinition
	indexDefinition    *IndexDefinition
	indexInfo          *IndexInfo
	indexOption        *IndexOption
	indexOptions       []*IndexOption
	indexColumn        *IndexColumn
	indexColumns       []*IndexColumn
	partDefs           []*PartitionDefinition
	partDef            *PartitionDefinition
	partSpec           *PartitionSpec
	vindexParam        VindexParam
	vindexParams       []VindexParam
	showFilter         *ShowFilter
	fromInPrepare      FromInPrepare
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const PG_ESCAPE_STRING = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const PRIMARY = 57452
const COLUMN = 57453
const CONSTRAINT = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const BEGIN = 57478
const START = 57479
const TRANSACTION = 57480
const COMMIT = 57481
const ROLLBACK = 57482
const DEALLOCATE = 57483
const PREPARE = 57484
const EXECUTE = 57485
const BIT = 57486
const TINYINT = 57487
const SMALLINT = 57488
const MEDIUMINT = 57489
const INT = 57490
const INTEGER = 57491
const BIGINT = 57492
const INTNUM = 57493
const REAL = 57494
const DOUBLE = 57495
const FLOAT_TYPE = 57496
const DECIMAL = 57497
const NUMERIC = 57498
const TIME = 57499
const TIMESTAMP = 57500
const DATETIME = 57501
const YEAR = 57502
const CHAR = 57503
const VARCHAR = 57504
const BOOL = 57505
const CHARACTER = 57506
const VARBINARY = 57507
const NCHAR = 57508
const TEXT = 57509
const TINYTEXT = 57510
const MEDIUMTEXT = 57511
const LONGTEXT = 57512
const BLOB = 57513
const TINYBLOB = 57514
const MEDIUMBLOB = 57515
const LONGBLOB = 57516
const JSON = 57517
const ENUM = 57518
const GEOMETRY = 57519
const POINT = 57520
const LINESTRING = 57521
const POLYGON = 57522
const GEOMETRYCOLLECTION = 57523
const MULTIPOINT = 57524
const MULTILINESTRING = 57525
const MULTIPOLYGON = 57526
const NULLX = 57527
const AUTO_INCREMENT = 57528
const APPROXNUM = 57529
const SIGNED = 57530
const UNSIGNED = 57531
const ZEROFILL = 57532
const DATABASES = 57533
const TABLES = 57534
const VITESS_KEYSPACES = 57535
const VITESS_SHARDS = 57536
const VITESS_TABLETS = 57537
const VSCHEMA_TABLES = 57538
const EXTENDED = 57539
const FULL = 57540
const PROCESSLIST = 57541
const NAMES = 57542
const CHARSET = 57543
const GLOBAL = 57544
const SESSION = 57545
const ISOLATION = 57546
const LEVEL = 57547
const READ = 57548
const WRITE = 57549
const ONLY = 57550
const REPEATABLE = 57551
const COMMITTED = 57552
const UNCOMMITTED = 57553
const SERIALIZABLE = 57554
const CURRENT_TIMESTAMP = 57555
const DATABASE = 57556
const CURRENT_DATE = 57557
const CURRENT_TIME = 57558
const LOCALTIME = 57559
const LOCALTIMESTAMP = 57560
const UTC_DATE = 57561
const UTC_TIME = 57562
const UTC_TIMESTAMP = 57563
const REPLACE = 57564
const CONVERT = 57565
const CAST = 57566
const SUBSTR = 57567
const SUBSTRING = 57568
const GROUP_CONCAT = 57569
const SEPARATOR = 57570
const MATCH = 57571
const AGAINST = 57572
const BOOLEAN = 57573
const LANGUAGE = 57574
const WITH = 57575
const QUERY = 57576
const EXPANSION = 57577
const UNUSED = 57578
const RETURNING = 57579

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"PG_ESCAPE_STRING",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"DEALLOCATE",
	"PREPARE",
	"EXECUTE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"RETURNING",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 39,
	151, 266,
	152, 266,
	-2, 256,
	-1, 247,
	110, 606,
	-2, 503,
	-1, 265,
	53, 603,
	110, 603,
	111, 603,
	112, 603,
	-2, 506,
	-1, 316,
	81, 764,
	-2, 62,
	-1, 317,
	81, 725,
	-2, 63,
	-1, 322,
	81, 709,
	-2, 568,
	-1, 324,
	81, 746,
	-2, 570,
	-1, 587,
	52, 45,
	54, 45,
	-2, 47,
	-1, 728,
	110, 608,
	-2, 605,
	-1, 729,
	110, 606,
	-2, 604,
	-1, 775,
	110, 606,
	-2, 503,
	-1, 935,
	5, 31,
	-2, 408,
	-1, 960,
	5, 30,
	-2, 540,
	-1, 1188,
	5, 31,
	-2, 541,
	-1, 1234,
	5, 30,
	-2, 543,
	-1, 1296,
	5, 31,
	-2, 544,
}

const yyPrivate = 57344

const yyLast = 9328

var yyAct = [...]int{

	247, 1287, 876, 535, 657, 1245, 1094, 829, 249, 793,
	1122, 1095, 811, 1091, 1022, 833, 1194, 534, 3, 226,
	856, 870, 794, 582, 276, 580, 832, 964, 1068, 980,
	754, 927, 1025, 59, 80, 1013, 321, 217, 192, 761,
	842, 192, 781, 731, 467, 597, 969, 473, 758, 866,
	315, 418, 192, 596, 241, 789, 250, 909, 479, 584,
	569, 487, 24, 235, 277, 53, 689, 312, 192, 192,
	320, 225, 58, 1183, 192, 310, 423, 1316, 1306, 1314,
	1294, 1312, 303, 549, 218, 219, 220, 221, 877, 302,
	1305, 1293, 1086, 301, 1180, 422, 1254, 1117, 1118, 1128,
	1129, 1130, 443, 825, 826, 239, 1116, 1133, 1131, 188,
	184, 185, 186, 988, 824, 598, 987, 599, 53, 989,
	686, 458, 1004, 849, 230, 1206, 231, 687, 431, 1221,
	857, 1169, 307, 63, 1167, 222, 232, 760, 54, 450,
	216, 1313, 1311, 201, 465, 1269, 499, 498, 508, 509,
	501, 502, 503, 504, 505, 506, 507, 500, 454, 455,
	510, 65, 66, 67, 68, 69, 445, 211, 447, 1288,
	790, 1046, 791, 432, 1069, 425, 1252, 812, 814, 182,
	665, 448, 192, 181, 192, 182, 692, 693, 844, 694,
	192, 656, 844, 444, 446, 850, 192, 1246, 979, 978,
	320, 320, 320, 320, 1071, 320, 977, 844, 420, 318,
	428, 1248, 320, 245, 195, 183, 419, 1274, 196, 1191,
	998, 187, 1055, 192, 198, 523, 524, 943, 1043, 921,
	702, 204, 200, 490, 1045, 438, 1279, 1137, 830, 1073,
	510, 1077, 489, 1072, 699, 1070, 484, 486, 903, 476,
	1075, 1147, 813, 500, 857, 1088, 510, 967, 202, 1074,
	1050, 206, 486, 475, 449, 449, 449, 449, 600, 449,
	1132, 782, 1076, 1078, 1253, 1251, 449, 442, 1247, 738,
	660, 843, 470, 474, 791, 843, 841, 839, 1138, 424,
	840, 1292, 197, 736, 737, 735, 53, 846, 1033, 491,
	843, 192, 847, 782, 1270, 950, 1002, 1282, 192, 192,
	192, 519, 520, 522, 320, 434, 435, 436, 481, 199,
	602, 207, 208, 209, 210, 214, 1031, 1044, 904, 1042,
	213, 212, 536, 526, 485, 484, 1298, 1049, 1212, 1211,
	1017, 547, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 486, 548, 550, 550, 550, 550, 550, 550, 550,
	550, 558, 559, 560, 561, 1016, 477, 426, 427, 55,
	1005, 1299, 581, 551, 552, 553, 554, 555, 556, 557,
	1280, 594, 451, 452, 453, 588, 456, 720, 722, 723,
	180, 1032, 721, 460, 1228, 1209, 1037, 1034, 1027, 1028,
	1035, 1030, 1029, 508, 509, 501, 502, 503, 504, 505,
	506, 507, 500, 1036, 939, 510, 938, 1155, 1014, 1039,
	56, 1277, 320, 701, 918, 919, 920, 1125, 192, 192,
	320, 734, 192, 485, 484, 192, 1124, 705, 706, 192,
	999, 320, 320, 320, 320, 320, 320, 320, 320, 940,
	486, 755, 990, 318, 756, 320, 320, 300, 879, 700,
	192, 1302, 466, 56, 757, 192, 1238, 1285, 527, 528,
	529, 530, 531, 532, 533, 674, 485, 484, 671, 711,
	485, 484, 670, 192, 485, 484, 449, 1090, 661, 489,
	659, 729, 654, 486, 449, 707, 672, 486, 485, 484,
	440, 486, 1238, 466, 466, 449, 449, 449, 449, 449,
	449, 449, 449, 1238, 1239, 486, 1203, 1202, 732, 449,
	449, 1113, 466, 1190, 466, 690, 690, 728, 1144, 1143,
	695, 1140, 1141, 1258, 765, 1140, 1139, 933, 466, 717,
	718, 709, 591, 775, 775, 566, 466, 1257, 726, 775,
	724, 774, 777, 767, 466, 769, 433, 783, 606, 605,
	1092, 419, 224, 965, 192, 1134, 775, 192, 192, 192,
	192, 192, 966, 60, 795, 1058, 818, 966, 590, 192,
	762, 764, 192, 592, 965, 590, 192, 53, 767, 565,
	192, 192, 536, 1186, 320, 772, 773, 566, 1146, 769,
	253, 1142, 537, 655, 779, 991, 320, 823, 786, 945,
	933, 664, 933, 566, 566, 819, 26, 905, 933, 965,
	26, 708, 675, 676, 677, 678, 679, 680, 681, 682,
	727, 307, 307, 307, 307, 307, 683, 684, 808, 593,
	858, 859, 860, 817, 821, 816, 581, 1233, 815, 822,
	797, 798, 944, 800, 307, 828, 796, 192, 836, 799,
	320, 942, 320, 56, 658, 703, 192, 56, 306, 192,
	320, 1216, 851, 871, 1033, 872, 770, 771, 1107, 766,
	768, 26, 778, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 784, 785, 510, 787, 788,
	868, 869, 1031, 729, 941, 958, 730, 232, 959, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 449, 810, 449, 994, 56, 928,
	970, 971, 874, 318, 449, 867, 862, 1127, 861, 728,
	571, 574, 575, 576, 572, 834, 573, 577, 71, 464,
	976, 910, 911, 1092, 56, 907, 908, 1018, 474, 973,
	732, 503, 504, 505, 506, 507, 500, 1032, 668, 510,
	459, 715, 1037, 1034, 1027, 1028, 1035, 1030, 1029, 923,
	501, 502, 503, 504, 505, 506, 507, 500, 805, 1036,
	510, 975, 922, 806, 802, 1026, 498, 508, 509, 501,
	502, 503, 504, 505, 506, 507, 500, 960, 801, 510,
	852, 853, 854, 855, 1310, 803, 981, 236, 237, 192,
	804, 1304, 934, 949, 1054, 480, 863, 864, 865, 807,
	1009, 575, 576, 320, 906, 1309, 962, 951, 916, 478,
	915, 880, 727, 882, 983, 982, 974, 984, 992, 521,
	468, 901, 917, 604, 961, 441, 963, 1001, 1284, 881,
	1283, 1231, 469, 995, 1008, 1063, 1010, 1011, 1012, 985,
	1184, 1217, 667, 1006, 1007, 1019, 320, 579, 320, 233,
	234, 996, 997, 307, 480, 499, 498, 508, 509, 501,
	502, 503, 504, 505, 506, 507, 500, 932, 1015, 510,
	462, 320, 930, 931, 192, 192, 192, 227, 306, 1263,
	60, 463, 914, 192, 935, 936, 937, 947, 1038, 228,
	913, 1024, 320, 946, 1262, 1219, 966, 482, 952, 1271,
	953, 954, 955, 956, 1207, 571, 574, 575, 576, 572,
	449, 573, 577, 698, 729, 970, 971, 62, 691, 5,
	924, 925, 926, 64, 589, 57, 1062, 1, 696, 775,
	1182, 525, 1100, 878, 981, 449, 775, 795, 1093, 1080,
	1079, 1061, 834, 1067, 795, 1021, 887, 1286, 1244, 1098,
	728, 1087, 1121, 838, 1096, 831, 417, 70, 1103, 1278,
	837, 1250, 320, 1101, 320, 1123, 1205, 845, 1102, 1003,
	848, 1126, 1281, 1000, 611, 1089, 609, 610, 608, 1120,
	613, 1115, 471, 612, 1135, 1136, 1114, 1023, 1119, 192,
	607, 1104, 1105, 203, 1097, 1106, 53, 1149, 1108, 313,
	578, 601, 873, 483, 82, 72, 1041, 1040, 883, 1048,
	1151, 192, 1109, 1110, 1111, 685, 902, 1154, 457, 205,
	191, 518, 912, 215, 986, 319, 320, 1020, 1099, 192,
	704, 1060, 472, 1148, 223, 1261, 1218, 948, 546, 780,
	252, 719, 264, 261, 263, 262, 1150, 1066, 242, 1153,
	191, 191, 1047, 1083, 1158, 1157, 191, 273, 266, 763,
	268, 269, 270, 271, 733, 1165, 710, 267, 272, 957,
	492, 251, 243, 305, 562, 1156, 570, 1185, 1195, 568,
	1195, 1195, 1195, 192, 1200, 567, 972, 968, 304, 1057,
	320, 1179, 1193, 307, 1268, 1112, 1196, 1197, 1198, 714,
	28, 834, 61, 834, 1201, 992, 1199, 238, 23, 22,
	21, 19, 1064, 1065, 18, 1181, 320, 320, 320, 17,
	20, 1178, 536, 16, 15, 1081, 1082, 14, 1084, 1085,
	1208, 1214, 1210, 1215, 32, 13, 12, 306, 306, 306,
	306, 306, 11, 10, 9, 8, 7, 6, 4, 229,
	25, 2, 306, 0, 1220, 0, 0, 1230, 0, 0,
	306, 1236, 1237, 0, 191, 1060, 191, 0, 1232, 0,
	0, 0, 191, 0, 1123, 0, 1159, 1234, 191, 0,
	449, 1096, 1243, 1161, 1249, 0, 1255, 1195, 1256, 0,
	0, 0, 0, 0, 1170, 1171, 1172, 0, 0, 1175,
	0, 0, 0, 1259, 0, 461, 0, 0, 536, 1275,
	1272, 0, 1187, 1188, 1189, 0, 1192, 0, 0, 0,
	1276, 1097, 0, 1273, 1235, 0, 0, 0, 1096, 834,
	0, 0, 0, 0, 0, 1162, 1163, 1290, 1164, 0,
	0, 1166, 775, 1168, 0, 1297, 0, 1160, 0, 0,
	795, 1295, 1260, 0, 0, 308, 1023, 834, 0, 1303,
	1300, 0, 0, 0, 893, 0, 0, 0, 1097, 0,
	53, 0, 0, 1307, 1308, 0, 0, 0, 892, 0,
	0, 0, 0, 191, 0, 0, 0, 1289, 536, 1204,
	191, 586, 191, 190, 1227, 0, 0, 1213, 0, 0,
	0, 0, 0, 0, 0, 897, 733, 0, 0, 0,
	0, 1240, 1241, 1242, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 421,
	1176, 466, 0, 0, 0, 0, 0, 1264, 1265, 1266,
	1267, 0, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 1222, 1223, 0,
	1224, 1225, 1226, 888, 885, 886, 0, 884, 499, 498,
	508, 509, 501, 502, 503, 504, 505, 506, 507, 500,
	0, 0, 510, 1291, 0, 0, 0, 0, 1296, 306,
	0, 0, 895, 898, 0, 0, 0, 0, 0, 0,
	0, 1301, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 191, 0, 0, 191, 0, 0, 191, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 1319, 1320, 0, 0, 0, 429, 0, 430,
	0, 0, 191, 0, 0, 437, 0, 697, 0, 0,
	0, 439, 889, 0, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 26, 27, 54,
	29, 30, 0, 673, 499, 498, 508, 509, 501, 502,
	503, 504, 505, 506, 507, 500, 45, 0, 510, 894,
	0, 31, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 896, 242, 0, 0, 1177, 0, 0, 0,
	40, 0, 0, 0, 56, 0, 0, 0, 0, 0,
	0, 242, 242, 0, 0, 776, 776, 242, 0, 0,
	0, 776, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 242, 242, 242, 242, 0, 191, 0, 776, 191,
	191, 191, 191, 191, 0, 0, 564, 0, 0, 0,
	0, 809, 0, 0, 191, 587, 0, 0, 586, 0,
	0, 0, 191, 191, 33, 34, 36, 35, 38, 499,
	498, 508, 509, 501, 502, 503, 504, 505, 506, 507,
	500, 0, 0, 510, 0, 39, 46, 47, 0, 0,
	48, 49, 37, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 41, 42, 0, 43, 44, 50,
	51, 52, 0, 0, 0, 0, 0, 0, 0, 306,
	1174, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 494, 0, 497, 0, 191, 0,
	0, 191, 511, 512, 513, 514, 515, 516, 517, 0,
	495, 496, 493, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 0, 0, 510, 0, 0,
	0, 0, 0, 662, 663, 673, 466, 666, 0, 616,
	669, 0, 0, 0, 0, 0, 0, 242, 0, 0,
	55, 0, 0, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 688, 0, 510, 0, 629,
	0, 0, 0, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 0, 0, 510, 716, 0,
	0, 0, 242, 642, 643, 644, 645, 646, 647, 648,
	0, 649, 650, 651, 652, 653, 630, 631, 632, 633,
	614, 615, 242, 0, 617, 0, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 634, 635, 636, 637,
	638, 639, 640, 641, 1173, 466, 499, 498, 508, 509,
	501, 502, 503, 504, 505, 506, 507, 500, 0, 0,
	510, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 499, 498, 508, 509, 501, 502, 503, 504,
	505, 506, 507, 500, 0, 0, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 820, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1051, 1052, 1053, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 242, 0, 0, 100, 0,
	0, 0, 875, 114, 0, 116, 242, 0, 149, 125,
	0, 899, 0, 0, 900, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	83, 776, 0, 0, 0, 0, 0, 93, 776, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 499, 498, 508, 509, 501, 502, 503,
	504, 505, 506, 507, 500, 0, 0, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 193, 0, 0, 0, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 191, 135, 143, 117, 156, 139, 163,
	194, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 191, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 178, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 179, 0,
	0, 172, 173, 174, 175, 586, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	115, 176, 140, 102, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 406, 396, 0, 368,
	408, 346, 360, 416, 361, 362, 389, 332, 376, 132,
	358, 0, 349, 327, 355, 328, 347, 370, 100, 373,
	345, 398, 379, 114, 414, 116, 384, 0, 149, 125,
	0, 0, 372, 400, 374, 394, 367, 390, 337, 383,
	409, 359, 387, 410, 0, 0, 0, 81, 0, 0,
	83, 835, 0, 0, 776, 0, 0, 93, 0, 386,
	405, 357, 388, 326, 385, 0, 330, 333, 415, 403,
	352, 353, 993, 0, 1145, 0, 0, 0, 0, 371,
	375, 391, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 350, 0, 382, 0, 0, 1152, 334, 331, 0,
	369, 0, 0, 0, 336, 0, 351, 392, 0, 325,
	395, 401, 366, 193, 404, 364, 363, 407, 138, 0,
	0, 152, 105, 104, 113, 399, 348, 356, 96, 354,
	144, 134, 164, 381, 135, 143, 117, 156, 139, 163,
	194, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 178, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 329, 0, 150, 166, 179, 344,
	402, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 340, 343, 338, 339, 377, 378, 411, 412, 413,
	393, 335, 0, 341, 342, 0, 397, 380, 84, 0,
	115, 176, 140, 102, 167, 406, 396, 0, 368, 408,
	346, 360, 416, 361, 362, 389, 332, 376, 132, 358,
	0, 349, 327, 355, 328, 347, 370, 100, 373, 345,
	398, 379, 114, 414, 116, 384, 0, 149, 125, 0,
	0, 372, 400, 374, 394, 367, 390, 337, 383, 409,
	359, 387, 410, 0, 0, 0, 81, 0, 0, 83,
	835, 0, 0, 0, 0, 0, 93, 0, 386, 405,
	357, 388, 326, 385, 0, 330, 333, 415, 403, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 371, 375,
	391, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	350, 0, 382, 0, 0, 0, 334, 331, 0, 369,
	0, 0, 0, 336, 0, 351, 392, 0, 325, 395,
	401, 366, 193, 404, 364, 363, 407, 138, 0, 0,
	152, 105, 104, 113, 399, 348, 356, 96, 354, 144,
	134, 164, 381, 135, 143, 117, 156, 139, 163, 194,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 178, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 329, 0, 150, 166, 179, 344, 402,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	340, 343, 338, 339, 377, 378, 411, 412, 413, 393,
	335, 0, 341, 342, 0, 397, 380, 84, 0, 115,
	176, 140, 102, 167, 406, 396, 0, 368, 408, 346,
	360, 416, 361, 362, 389, 332, 376, 132, 358, 0,
	349, 327, 355, 328, 347, 370, 100, 373, 345, 398,
	379, 114, 414, 116, 384, 0, 149, 125, 0, 0,
	372, 400, 374, 394, 367, 390, 337, 383, 409, 359,
	387, 410, 56, 0, 0, 81, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 93, 0, 386, 405, 357,
	388, 326, 385, 0, 330, 333, 415, 403, 352, 353,
	0, 0, 0, 0, 0, 0, 0, 371, 375, 391,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 350,
	0, 382, 0, 0, 0, 334, 331, 0, 369, 0,
	0, 0, 336, 0, 351, 392, 0, 325, 395, 401,
	366, 193, 404, 364, 363, 407, 138, 0, 0, 152,
	105, 104, 113, 399, 348, 356, 96, 354, 144, 134,
	164, 381, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 329, 0, 150, 166, 179, 344, 402, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 340,
	343, 338, 339, 377, 378, 411, 412, 413, 393, 335,
	0, 341, 342, 0, 397, 380, 84, 0, 115, 176,
	140, 102, 167, 406, 396, 0, 368, 408, 346, 360,
	416, 361, 362, 389, 332, 376, 132, 358, 0, 349,
	327, 355, 328, 347, 370, 100, 373, 345, 398, 379,
	114, 414, 116, 384, 0, 149, 125, 0, 0, 372,
	400, 374, 394, 367, 390, 337, 383, 409, 359, 387,
	410, 0, 0, 0, 81, 0, 0, 83, 0, 0,
	0, 0, 0, 0, 93, 0, 386, 405, 357, 388,
	326, 385, 0, 330, 333, 415, 403, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 371, 375, 391, 365,
	0, 0, 0, 0, 0, 0, 1059, 0, 350, 0,
	382, 0, 0, 0, 334, 331, 0, 369, 0, 0,
	0, 336, 0, 351, 392, 0, 325, 395, 401, 366,
	193, 404, 364, 363, 407, 138, 0, 0, 152, 105,
	104, 113, 399, 348, 356, 96, 354, 144, 134, 164,
	381, 135, 143, 117, 156, 139, 163, 194, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 178, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 329, 0, 150, 166, 179, 344, 402, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 340, 343,
	338, 339, 377, 378, 411, 412, 413, 393, 335, 0,
	341, 342, 0, 397, 380, 84, 0, 115, 176, 140,
	102, 167, 406, 396, 0, 368, 408, 346, 360, 416,
	361, 362, 389, 332, 376, 132, 358, 0, 349, 327,
	355, 328, 347, 370, 100, 373, 345, 398, 379, 114,
	414, 116, 384, 0, 149, 125, 0, 0, 372, 400,
	374, 394, 367, 390, 337, 383, 409, 359, 387, 410,
	0, 0, 0, 81, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 93, 0, 386, 405, 357, 388, 326,
	385, 0, 330, 333, 415, 403, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 371, 375, 391, 365, 0,
	0, 0, 0, 0, 0, 725, 0, 350, 0, 382,
	0, 0, 0, 334, 331, 0, 369, 0, 0, 0,
	336, 0, 351, 392, 0, 325, 395, 401, 366, 193,
	404, 364, 363, 407, 138, 0, 0, 152, 105, 104,
	113, 399, 348, 356, 96, 354, 144, 134, 164, 381,
	135, 143, 117, 156, 139, 163, 194, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 178, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	329, 0, 150, 166, 179, 344, 402, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 340, 343, 338,
	339, 377, 378, 411, 412, 413, 393, 335, 0, 341,
	342, 0, 397, 380, 84, 0, 115, 176, 140, 102,
	167, 406, 396, 0, 368, 408, 346, 360, 416, 361,
	362, 389, 332, 376, 132, 358, 0, 349, 327, 355,
	328, 347, 370, 100, 373, 345, 398, 379, 114, 414,
	116, 384, 0, 149, 125, 0, 0, 372, 400, 374,
	394, 367, 390, 337, 383, 409, 359, 387, 410, 0,
	0, 0, 81, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 93, 0, 386, 405, 357, 388, 326, 385,
	0, 330, 333, 415, 403, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 371, 375, 391, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 0, 382, 0,
	0, 0, 334, 331, 0, 369, 0, 0, 0, 336,
	0, 351, 392, 0, 325, 395, 401, 366, 193, 404,
	364, 363, 407, 138, 0, 0, 152, 105, 104, 113,
	399, 348, 356, 96, 354, 144, 134, 164, 381, 135,
	143, 117, 156, 139, 163, 194, 171, 154, 170, 85,
	153, 162, 94, 146, 0, 0, 0, 87, 160, 151,
	123, 109, 110, 86, 0, 142, 99, 103, 98, 131,
	157, 158, 97, 178, 90, 169, 89, 91, 168, 130,
	155, 161, 124, 121, 88, 159, 122, 120, 112, 101,
	106, 136, 119, 137, 107, 127, 126, 128, 0, 329,
	0, 150, 166, 179, 344, 402, 172, 173, 174, 175,
	0, 0, 0, 129, 92, 108, 147, 111, 118, 141,
	177, 133, 145, 95, 165, 148, 340, 343, 338, 339,
	377, 378, 411, 412, 413, 393, 335, 0, 341, 342,
	0, 397, 380, 84, 0, 115, 176, 140, 102, 167,
	406, 396, 0, 368, 408, 346, 360, 416, 361, 362,
	389, 332, 376, 132, 358, 0, 349, 327, 355, 328,
	347, 370, 100, 373, 345, 398, 379, 114, 414, 116,
	384, 0, 149, 125, 0, 0, 372, 400, 374, 394,
	367, 390, 337, 383, 409, 359, 387, 410, 0, 0,
	0, 81, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 93, 0, 386, 405, 357, 388, 326, 385, 0,
	330, 333, 415, 403, 352, 353, 0, 0, 0, 0,
	0, 0, 0, 371, 375, 391, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 350, 0, 382, 0, 0,
	0, 334, 331, 0, 369, 0, 0, 0, 336, 0,
	351, 392, 0, 325, 395, 401, 366, 193, 404, 364,
	363, 407, 138, 0, 0, 152, 105, 104, 113, 399,
	348, 356, 96, 354, 144, 134, 164, 381, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 323, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 329, 0,
	150, 166, 179, 344, 402, 172, 173, 174, 175, 0,
	0, 0, 324, 322, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 340, 343, 338, 339, 377,
	378, 411, 412, 413, 393, 335, 0, 341, 342, 0,
	397, 380, 84, 0, 115, 176, 140, 102, 167, 406,
	396, 0, 368, 408, 346, 360, 416, 361, 362, 389,
	332, 376, 132, 358, 0, 349, 327, 355, 328, 347,
	370, 100, 373, 345, 398, 379, 114, 414, 116, 384,
	0, 149, 125, 0, 0, 372, 400, 374, 394, 367,
	390, 337, 383, 409, 359, 387, 410, 0, 0, 0,
	81, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	93, 0, 386, 405, 357, 388, 326, 385, 0, 330,
	333, 415, 403, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 371, 375, 391, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 382, 0, 0, 0,
	334, 331, 0, 369, 0, 0, 0, 336, 0, 351,
	392, 0, 325, 395, 401, 366, 193, 404, 364, 363,
	407, 138, 0, 0, 152, 105, 104, 113, 399, 348,
	356, 96, 354, 144, 134, 164, 381, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 595,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 323, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 329, 0, 150,
	166, 179, 344, 402, 172, 173, 174, 175, 0, 0,
	0, 324, 322, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 340, 343, 338, 339, 377, 378,
	411, 412, 413, 393, 335, 0, 341, 342, 0, 397,
	380, 84, 0, 115, 176, 140, 102, 167, 406, 396,
	0, 368, 408, 346, 360, 416, 361, 362, 389, 332,
	376, 132, 358, 0, 349, 327, 355, 328, 347, 370,
	100, 373, 345, 398, 379, 114, 414, 116, 384, 0,
	149, 125, 0, 0, 372, 400, 374, 394, 367, 390,
	337, 383, 409, 359, 387, 410, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 386, 405, 357, 388, 326, 385, 0, 330, 333,
	415, 403, 352, 353, 0, 0, 0, 0, 0, 0,
	0, 371, 375, 391, 365, 0, 0, 0, 0, 0,
	0, 0, 0, 350, 0, 382, 0, 0, 0, 334,
	331, 0, 369, 0, 0, 0, 336, 0, 351, 392,
	0, 325, 395, 401, 366, 193, 404, 364, 363, 407,
	138, 0, 0, 152, 105, 104, 113, 399, 348, 356,
	96, 354, 144, 134, 164, 381, 135, 143, 117, 156,
	139, 163, 194, 171, 154, 170, 85, 153, 314, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	178, 90, 169, 89, 323, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 329, 0, 150, 166,
	179, 344, 402, 172, 173, 174, 175, 0, 0, 0,
	324, 322, 317, 316, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 340, 343, 338, 339, 377, 378, 411,
	412, 413, 393, 335, 0, 341, 342, 0, 397, 380,
	84, 0, 115, 176, 140, 102, 167, 132, 0, 0,
	759, 0, 248, 0, 0, 0, 100, 0, 246, 0,
	0, 114, 287, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 278, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 81, 273, 266, 265, 268,
	269, 270, 271, 0, 0, 93, 267, 272, 274, 275,
	0, 0, 244, 259, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 240, 0, 0,
	0, 298, 0, 258, 0, 0, 254, 255, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 296, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 288,
	297, 294, 295, 292, 293, 291, 290, 289, 299, 280,
	281, 282, 283, 285, 0, 284, 84, 0, 115, 176,
	140, 102, 167, 132, 0, 0, 0, 0, 248, 0,
	0, 0, 100, 0, 246, 0, 0, 114, 287, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 278, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 81, 273, 266, 265, 268, 269, 270, 271, 0,
	0, 93, 267, 272, 274, 275, 0, 0, 244, 259,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 1229, 0, 0, 0, 298, 0, 258,
	0, 0, 254, 255, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	296, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 179, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 288, 297, 294, 295, 292,
	293, 291, 290, 289, 299, 280, 281, 282, 283, 285,
	0, 284, 84, 0, 115, 176, 140, 102, 167, 132,
	0, 0, 0, 0, 248, 0, 0, 0, 100, 0,
	246, 0, 0, 114, 287, 116, 0, 0, 149, 125,
	0, 0, 0, 0, 278, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 466, 81, 273, 266,
	265, 268, 269, 270, 271, 0, 0, 93, 267, 272,
	274, 275, 0, 0, 244, 259, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 0,
	0, 0, 0, 298, 0, 258, 0, 0, 254, 255,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 296, 0, 138, 0,
	0, 152, 105, 104, 113, 0, 0, 0, 96, 0,
	144, 134, 164, 0, 135, 143, 117, 156, 139, 163,
	194, 171, 154, 170, 85, 153, 162, 94, 146, 0,
	0, 0, 87, 160, 151, 123, 109, 110, 86, 0,
	142, 99, 103, 98, 131, 157, 158, 97, 178, 90,
	169, 89, 91, 168, 130, 155, 161, 124, 121, 88,
	159, 122, 120, 112, 101, 106, 136, 119, 137, 107,
	127, 126, 128, 0, 0, 0, 150, 166, 179, 0,
	0, 172, 173, 174, 175, 0, 0, 0, 129, 92,
	108, 147, 111, 118, 141, 177, 133, 145, 95, 165,
	148, 288, 297, 294, 295, 292, 293, 291, 290, 289,
	299, 280, 281, 282, 283, 285, 0, 284, 84, 0,
	115, 176, 140, 102, 167, 132, 0, 0, 0, 0,
	248, 0, 0, 0, 100, 0, 246, 0, 0, 114,
	287, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	278, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 81, 273, 266, 265, 268, 269, 270,
	271, 0, 0, 93, 267, 272, 274, 275, 0, 0,
	244, 259, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 240, 0, 0, 0, 298,
	0, 258, 0, 0, 254, 255, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 296, 0, 138, 0, 0, 152, 105, 104,
	113, 0, 0, 0, 96, 0, 144, 134, 164, 0,
	135, 143, 117, 156, 139, 163, 194, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 178, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 179, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 288, 297, 294,
	295, 292, 293, 291, 290, 289, 299, 280, 281, 282,
	283, 285, 0, 284, 84, 0, 115, 176, 140, 102,
	167, 132, 0, 0, 0, 0, 248, 0, 0, 0,
	100, 0, 246, 0, 0, 114, 287, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 278, 279, 0, 0,
	0, 0, 0, 0, 827, 0, 56, 0, 0, 81,
	273, 266, 265, 268, 269, 270, 271, 0, 0, 93,
	267, 272, 274, 275, 0, 0, 244, 259, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 0, 0, 0, 0, 298, 0, 258, 0, 0,
	254, 255, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 296, 0,
	138, 0, 0, 152, 105, 104, 113, 0, 0, 0,
	96, 0, 144, 134, 164, 0, 135, 143, 117, 156,
	139, 163, 194, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	178, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 0, 0, 150, 166,
	179, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 288, 297, 294, 295, 292, 293, 291,
	290, 289, 299, 280, 281, 282, 283, 285, 26, 284,
	84, 0, 115, 176, 140, 102, 167, 0, 0, 0,
	132, 0, 0, 0, 0, 248, 0, 0, 0, 100,
	0, 246, 0, 0, 114, 287, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 81, 273,
	266, 265, 268, 269, 270, 271, 0, 0, 93, 267,
	272, 274, 275, 0, 0, 244, 259, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	0, 0, 0, 0, 298, 0, 258, 0, 0, 254,
	255, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 296, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 288, 297, 294, 295, 292, 293, 291, 290,
	289, 299, 280, 281, 282, 283, 285, 0, 284, 84,
	0, 115, 176, 140, 102, 167, 132, 0, 0, 0,
	0, 248, 0, 0, 0, 100, 0, 246, 0, 0,
	114, 287, 116, 0, 0, 149, 125, 0, 0, 0,
	0, 278, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 81, 273, 266, 265, 268, 269,
	270, 271, 0, 0, 93, 267, 272, 274, 275, 0,
	0, 244, 259, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 0, 0, 0, 0,
	298, 0, 258, 0, 0, 254, 255, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 296, 0, 138, 0, 0, 152, 105,
	104, 113, 0, 0, 0, 96, 0, 144, 134, 164,
	0, 135, 143, 117, 156, 139, 163, 194, 171, 154,
	170, 85, 153, 162, 94, 146, 0, 0, 0, 87,
	160, 151, 123, 109, 110, 86, 0, 142, 99, 103,
	98, 131, 157, 158, 97, 178, 90, 169, 89, 91,
	168, 130, 155, 161, 124, 121, 88, 159, 122, 120,
	112, 101, 106, 136, 119, 137, 107, 127, 126, 128,
	0, 0, 0, 150, 166, 179, 0, 0, 172, 173,
	174, 175, 0, 0, 0, 129, 92, 108, 147, 111,
	118, 141, 177, 133, 145, 95, 165, 148, 288, 297,
	294, 295, 292, 293, 291, 290, 289, 299, 280, 281,
	282, 283, 285, 132, 284, 84, 0, 115, 176, 140,
	102, 167, 100, 0, 0, 0, 0, 114, 287, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 278, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 81, 273, 266, 265, 268, 269, 270, 271, 0,
	0, 93, 267, 272, 274, 275, 0, 0, 0, 259,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 0, 0, 0, 0, 298, 0, 258,
	0, 0, 254, 255, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	296, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 1318, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 179, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 288, 297, 294, 295, 292,
	293, 291, 290, 289, 299, 280, 281, 282, 283, 285,
	132, 284, 84, 0, 115, 176, 140, 102, 167, 100,
	0, 0, 0, 0, 114, 287, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 81, 273,
	266, 265, 268, 269, 270, 271, 0, 0, 93, 267,
	272, 274, 275, 0, 0, 0, 259, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	0, 0, 0, 0, 298, 0, 258, 0, 0, 254,
	255, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 296, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 288, 297, 294, 295, 292, 293, 291, 290,
	289, 299, 280, 281, 282, 283, 285, 132, 284, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 73, 0, 0, 0, 79, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 75, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 115, 176,
	140, 102, 167, 132, 0, 0, 0, 488, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 179, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 0, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 84, 0, 115, 176, 140, 102, 167, 100,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 81, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 0, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 83, 712,
	0, 0, 713, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 115, 176,
	140, 102, 167, 132, 0, 0, 0, 585, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 135, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 179, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 84, 0, 115, 176, 140, 102, 167, 100,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 149,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 0, 81, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 138,
	0, 0, 152, 105, 104, 113, 0, 0, 0, 96,
	0, 144, 134, 164, 0, 135, 143, 117, 156, 139,
	163, 194, 171, 154, 170, 85, 153, 162, 94, 146,
	0, 0, 0, 87, 160, 151, 123, 109, 110, 86,
	0, 142, 99, 103, 98, 131, 157, 158, 97, 178,
	90, 169, 89, 91, 168, 130, 155, 161, 124, 121,
	88, 159, 122, 120, 112, 101, 106, 136, 119, 137,
	107, 127, 126, 128, 0, 0, 0, 150, 166, 179,
	0, 0, 172, 173, 174, 175, 0, 0, 0, 129,
	92, 108, 147, 111, 118, 141, 177, 133, 145, 95,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 84,
	0, 115, 176, 140, 102, 167, 100, 0, 603, 0,
	0, 114, 0, 116, 0, 0, 149, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 138, 0, 0, 152,
	105, 104, 113, 0, 0, 0, 96, 0, 144, 134,
	164, 0, 135, 143, 117, 156, 139, 163, 194, 171,
	154, 170, 85, 153, 162, 94, 146, 0, 0, 0,
	87, 160, 151, 123, 109, 110, 86, 0, 142, 99,
	103, 98, 131, 157, 158, 97, 178, 90, 169, 89,
	91, 168, 130, 155, 161, 124, 121, 88, 159, 122,
	120, 112, 101, 106, 136, 119, 137, 107, 127, 126,
	128, 0, 0, 0, 150, 166, 179, 0, 0, 172,
	173, 174, 175, 0, 0, 0, 129, 92, 108, 147,
	111, 118, 141, 177, 133, 145, 95, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 115, 176,
	140, 102, 167, 132, 0, 0, 0, 585, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 149, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 83, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 138, 0, 0, 152, 105, 104, 113, 0,
	0, 0, 96, 0, 144, 134, 164, 0, 583, 143,
	117, 156, 139, 163, 194, 171, 154, 170, 85, 153,
	162, 94, 146, 0, 0, 0, 87, 160, 151, 123,
	109, 110, 86, 0, 142, 99, 103, 98, 131, 157,
	158, 97, 178, 90, 169, 89, 91, 168, 130, 155,
	161, 124, 121, 88, 159, 122, 120, 112, 101, 106,
	136, 119, 137, 107, 127, 126, 128, 0, 0, 0,
	150, 166, 179, 0, 0, 172, 173, 174, 175, 0,
	0, 0, 129, 92, 108, 147, 111, 118, 141, 177,
	133, 145, 95, 165, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 84, 0, 115, 176, 140, 102, 167, 563,
	100, 0, 0, 0, 0, 114, 0, 116, 0, 0,
	149, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 83, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	138, 0, 0, 152, 105, 104, 113, 0, 0, 0,
	96, 0, 144, 134, 164, 0, 135, 143, 117, 156,
	139, 163, 194, 171, 154, 170, 85, 153, 162, 94,
	146, 0, 0, 0, 87, 160, 151, 123, 109, 110,
	86, 0, 142, 99, 103, 98, 131, 157, 158, 97,
	178, 90, 169, 89, 91, 168, 130, 155, 161, 124,
	121, 88, 159, 122, 120, 112, 101, 106, 136, 119,
	137, 107, 127, 126, 128, 0, 0, 0, 150, 166,
	179, 0, 0, 172, 173, 174, 175, 0, 0, 0,
	129, 92, 108, 147, 111, 118, 141, 177, 133, 145,
	95, 165, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 309, 0, 0, 0, 0, 0, 0, 132, 0,
	84, 0, 115, 176, 140, 102, 167, 100, 0, 0,
	0, 0, 114, 0, 116, 0, 0, 149, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 138, 0, 0,
	152, 105, 104, 113, 0, 0, 0, 96, 0, 144,
	134, 164, 0, 135, 143, 117, 156, 139, 163, 194,
	171, 154, 170, 85, 153, 162, 94, 146, 0, 0,
	0, 87, 160, 151, 123, 109, 110, 86, 0, 142,
	99, 103, 98, 131, 157, 158, 97, 178, 90, 169,
	89, 91, 168, 130, 155, 161, 124, 121, 88, 159,
	122, 120, 112, 101, 106, 136, 119, 137, 107, 127,
	126, 128, 0, 0, 0, 150, 166, 179, 0, 0,
	172, 173, 174, 175, 0, 0, 0, 129, 92, 108,
	147, 111, 118, 141, 177, 133, 145, 95, 165, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 84, 0, 115,
	176, 140, 102, 167, 100, 0, 0, 0, 0, 114,
	0, 116, 0, 0, 149, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 193,
	0, 0, 0, 0, 138, 0, 0, 152, 105, 104,
	113, 0, 0, 0, 96, 0, 144, 134, 164, 0,
	135, 143, 117, 156, 139, 163, 194, 171, 154, 170,
	85, 153, 162, 94, 146, 0, 0, 0, 87, 160,
	151, 123, 109, 110, 86, 0, 142, 99, 103, 98,
	131, 157, 158, 97, 178, 90, 169, 89, 91, 168,
	130, 155, 161, 124, 121, 88, 159, 122, 120, 112,
	101, 106, 136, 119, 137, 107, 127, 126, 128, 0,
	0, 0, 150, 166, 179, 0, 0, 172, 173, 174,
	175, 0, 0, 0, 129, 92, 108, 147, 111, 118,
	141, 177, 133, 145, 95, 165, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 84, 0, 115, 176, 140, 102,
	167, 100, 0, 0, 0, 0, 114, 0, 116, 0,
	0, 149, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 138, 0, 0, 152, 105, 104, 113, 0, 0,
	0, 96, 0, 144, 134, 164, 0, 135, 143, 117,
	156, 139, 163, 194, 171, 154, 170, 85, 153, 162,
	94, 146, 0, 0, 0, 87, 160, 151, 123, 109,
	110, 86, 0, 142, 99, 103, 98, 131, 157, 158,
	97, 178, 90, 169, 89, 91, 168, 130, 155, 161,
	124, 121, 88, 159, 122, 120, 112, 101, 106, 136,
	119, 137, 107, 127, 126, 128, 0, 0, 0, 150,
	166, 179, 0, 0, 172, 173, 174, 175, 0, 0,
	0, 129, 92, 108, 147, 111, 118, 141, 177, 133,
	145, 95, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 115, 176, 140, 102, 167,
}
var yyPact = [...]int{

	1491, -1000, -183, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 895, 942, -1000, -1000, -1000, -1000,
	-1000, -1000, 695, 6549, 61, 95, -10, 8847, 94, 111,
	9074, -1000, -15, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-24, 9074, 506, 610, -1000, -1000, -1000, -1000, -1000, 890,
	903, 701, 859, 778, -1000, 5157, 55, 7702, 8620, 4213,
	-1000, 505, 87, 9074, -144, 9074, 50, 50, 50, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	90, 9074, -1000, 9074, 48, 500, 48, 48, 48, 9074,
	-1000, 125, -1000, -1000, -1000, 9074, 444, 825, 46, 2719,
	2719, 2719, 2719, 7, 2719, -94, 719, -1000, -1000, -1000,
	-1000, 2719, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9074, 889, 697, 449, 831, 5868, 5868, 895,
	-1000, 610, -1000, -1000, -1000, 804, -1000, -1000, 253, 916,
	-1000, 6785, 123, -1000, 5868, 1601, 410, 410, 410, 114,
	269, -1000, -1000, -1000, 6322, 6322, 6322, 6322, 6322, 6322,
	6322, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5632, 410, 410,
	410, 410, 410, 410, 410, 410, 5868, 410, 410, 410,
	410, 410, 410, 410, 410, 410, 410, 410, 410, 410,
	8393, 559, 699, -1000, -1000, -1000, 855, 7012, 8165, 9074,
	531, -1000, 585, 3964, -106, -1000, -1000, -1000, 187, 7929,
	-1000, -1000, -1000, 823, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 504, -1000, 1612,
	436, 2719, 69, 612, 434, 207, 432, 9074, 9074, 2719,
	57, 9074, 849, 717, 9074, 426, 422, -1000, 3466, -1000,
	2719, 2719, 2719, 2719, 2719, 2719, 2719, 2719, -1000, -1000,
	-1000, -1000, -1000, -1000, 2719, 2719, -1000, -89, -1000, 9074,
	-1000, -1000, 130, 130, 9074, -1000, -1000, -1000, 934, 153,
	405, 120, 611, -1000, 413, 890, 449, 778, 7239, 729,
	-1000, -1000, 9074, -1000, 5868, 5868, 319, -1000, 9074, -1000,
	3217, 159, 6322, 367, 204, 6322, 6322, 6322, 6322, 6322,
	6322, 6322, 6322, 6322, 6322, 6322, 6322, 6322, 6322, 6322,
	395, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 408,
	4449, -1000, 610, 1030, 1030, -1000, -1000, 134, 134, 134,
	134, 134, 134, 1911, 449, 499, 263, 5632, 5157, 5157,
	5868, 5868, 9074, 9074, 5157, 863, 194, 263, 9074, -1000,
	449, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5157, 5157,
	5157, 5157, 141, 9074, -1000, 9074, 7702, 7702, 7702, 7702,
	7702, -1000, 767, 753, -1000, 774, 747, 788, 9074, -1000,
	491, 7012, 128, 410, -1000, 9074, -1000, 29, 524, 7702,
	9074, -1000, -1000, 3715, 585, -106, 553, -1000, -108, -121,
	5393, 132, -1000, -1000, -1000, 2470, 160, 229, -83, -1000,
	-1000, -1000, 619, -1000, 619, 619, 619, 619, -51, -51,
	-51, -51, -1000, -1000, -1000, -1000, -1000, 685, 683, -1000,
	619, 619, 619, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 682,
	682, 682, 620, 620, 680, -1000, 9074, -162, 402, 2719,
	836, 2719, -1000, 1279, -1000, 9074, -1000, -1000, 9074, 2719,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 237, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 563, -1000, -1000, 797,
	5868, 5868, 3466, 5868, -1000, -1000, -1000, 831, -1000, 863,
	901, -1000, 807, 805, 5157, -1000, -1000, 159, 174, -1000,
	-1000, 356, -1000, -1000, -1000, -1000, 119, 410, -1000, -1000,
	1724, -1000, -1000, -1000, -1000, 367, 6322, 6322, 6322, 591,
	1724, 1412, 309, 703, 134, 663, 663, 150, 150, 150,
	150, 150, 684, 684, -1000, -1000, -1000, 449, 449, 5157,
	556, -1000, 269, -1000, 269, -1000, -1000, 5868, -1000, 449,
	483, 483, 362, 427, 650, -1000, 117, 598, 483, 5157,
	226, -1000, 5868, 449, -1000, 483, 449, 483, 483, 675,
	803, 410, -1000, 565, -1000, 176, 699, 679, 708, 894,
	-1000, -1000, -1000, -1000, 750, -1000, 709, -1000, -1000, -1000,
	-1000, -1000, 85, 78, 77, 9074, -1000, 914, 7702, 560,
	-1000, -1000, 553, -106, -110, -1000, -1000, -1000, 263, -1000,
	396, 551, 2221, -1000, -1000, -1000, -1000, -1000, 674, 835,
	179, 164, 384, -1000, -1000, 828, -1000, 238, -85, -1000,
	-1000, 310, -51, -51, -1000, -1000, 132, 800, 132, 132,
	132, 359, 359, -1000, -1000, -1000, -1000, 305, -1000, -1000,
	-1000, 280, -1000, 706, 9074, 2719, -1000, 3466, -1000, -1000,
	-1000, -1000, -1000, -1000, 646, 270, 206, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28, -1000,
	2719, -1000, 248, 9074, 9074, 9074, 786, 263, 263, 112,
	-1000, -1000, 9074, -1000, -1000, -1000, -1000, 564, -1000, -1000,
	-1000, 2968, 5157, -1000, 591, 1724, 793, -1000, 6322, 6322,
	-1000, -1000, 483, 5157, 263, -1000, -1000, -1000, 67, 395,
	67, 6322, 6322, 3466, 6322, 6322, -155, 558, 175, -1000,
	5868, 409, -1000, -1000, -1000, -1000, -1000, 702, 9074, 410,
	-1000, 7012, -1000, 9074, 895, 9074, 5868, 5868, -1000, -1000,
	5868, 625, -1000, 5868, -1000, -1000, -1000, 410, 410, 410,
	467, -1000, 895, 560, -1000, -1000, -1000, -117, -130, -1000,
	-1000, 2470, -1000, 2470, 9074, -1000, 380, 371, -1000, -1000,
	686, 40, -1000, -1000, -1000, 510, 132, 132, -1000, 181,
	-1000, -1000, -1000, 481, -1000, 477, 547, 474, 9074, -1000,
	-1000, 544, -1000, 170, -1000, -1000, 9074, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9074,
	9074, -1000, -1000, -1000, -1000, -1000, 9074, -1000, -1000, 358,
	5868, -1000, -1000, -1000, -1000, 3466, -1000, 914, 7702, -1000,
	-1000, 449, -1000, 6322, 1724, 1724, -1000, -1000, 449, 619,
	619, -1000, 619, 620, -1000, 619, -32, 619, -35, 449,
	449, 1760, 1641, -1000, 1306, 1517, 410, -151, -1000, 263,
	5868, -181, 843, 509, 539, -1000, -1000, 4921, 449, 469,
	109, 467, 890, -1000, 263, 263, 263, 9074, 263, 9074,
	9074, 9074, 7475, 9074, 890, -1000, -1000, -1000, -1000, 2221,
	-1000, 462, -1000, 619, -1000, -1000, -78, 925, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -51,
	336, -51, 279, -1000, 278, 2719, 3466, 2470, -1000, 618,
	-1000, -1000, -1000, -1000, 845, -1000, 263, 912, 543, -1000,
	1724, -1000, -1000, 73, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6322, 6322, -1000, 6322, 6322, 6322, 449,
	335, 263, -1000, 4685, 833, -1000, 410, -1000, -1000, 614,
	9074, 9074, -1000, -1000, 459, -1000, 448, 448, 448, 128,
	-1000, -1000, 145, 9074, -1000, 148, -1000, -134, 132, -1000,
	132, 492, 478, -1000, -1000, -1000, 9074, 410, 910, 893,
	-1000, -1000, 1661, 1661, 1661, 1661, 54, -1000, -1000, -1000,
	534, 920, -1000, 410, -1000, 610, 107, -1000, 9074, -1000,
	-1000, -1000, -1000, -1000, 145, -1000, 365, 155, 321, -1000,
	241, 832, -1000, 830, -1000, -1000, -1000, -1000, -1000, 412,
	26, -1000, 5868, 5868, -1000, -1000, -1000, -1000, 449, 43,
	-171, 9074, 539, 449, 9074, -1000, -1000, -1000, 276, -1000,
	-1000, -1000, 312, -1000, -1000, 612, 407, -1000, 9074, 263,
	534, -1000, 783, -159, -174, 530, -1000, -1000, -1000, -1000,
	-162, -1000, 26, 802, -1000, 776, -1000, -1000, -1000, -3,
	-169, -5, -172, 410, -175, 6095, -1000, 1661, 449, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1181, 17, 62, 1180, 1179, 1178, 948, 1177, 1176,
	1175, 1174, 1173, 1172, 1166, 1165, 1164, 1157, 1154, 1153,
	1150, 1149, 1144, 1141, 1140, 1139, 1138, 133, 1137, 1132,
	1130, 58, 1129, 63, 1124, 1121, 31, 137, 48, 39,
	54, 1119, 25, 89, 82, 1118, 46, 1117, 1116, 75,
	1115, 60, 1109, 1106, 1285, 1104, 1103, 12, 27, 1102,
	1101, 1100, 1099, 56, 213, 1096, 1075, 1074, 1073, 1072,
	1071, 43, 3, 6, 24, 11, 1070, 600, 8, 1069,
	42, 1068, 1067, 1066, 1065, 33, 1062, 47, 1060, 19,
	44, 1058, 16, 55, 29, 13, 9, 67, 53, 1055,
	22, 50, 45, 1054, 1052, 390, 1051, 1049, 1048, 1046,
	1045, 1039, 128, 289, 1038, 1037, 1036, 1035, 36, 1034,
	0, 139, 61, 1033, 1032, 1031, 1012, 57, 59, 23,
	1030, 37, 181, 30, 1029, 1023, 28, 1020, 1013, 1010,
	1008, 1007, 1006, 1004, 195, 1003, 1002, 1001, 20, 7,
	1000, 999, 49, 21, 997, 996, 991, 35, 51, 990,
	40, 989, 987, 986, 985, 26, 15, 983, 10, 982,
	5, 978, 977, 1, 976, 14, 975, 2, 963, 4,
	32, 961, 960, 66, 958, 957, 955, 64, 144, 954,
	953, 83,
}
var yyR1 = [...]int{

	0, 185, 186, 186, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 7, 30, 30, 8,
	9, 9, 9, 189, 189, 49, 49, 93, 93, 10,
	10, 10, 10, 98, 98, 102, 102, 102, 103, 103,
	103, 103, 134, 134, 11, 11, 11, 11, 11, 11,
	11, 179, 179, 178, 177, 177, 176, 176, 175, 16,
	162, 163, 163, 163, 158, 137, 137, 137, 137, 140,
	140, 138, 138, 138, 138, 138, 138, 138, 139, 139,
	139, 139, 139, 141, 141, 141, 141, 141, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 143, 143, 143, 143, 143, 143, 143,
	143, 157, 157, 144, 144, 152, 152, 153, 153, 153,
	150, 150, 151, 151, 154, 154, 154, 145, 145, 145,
	145, 145, 145, 145, 147, 147, 155, 155, 148, 148,
	148, 149, 149, 156, 156, 156, 156, 156, 146, 146,
	159, 159, 171, 171, 170, 170, 170, 161, 161, 167,
	167, 167, 167, 167, 160, 160, 169, 169, 168, 164,
	164, 164, 165, 165, 165, 166, 166, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 174, 172, 172,
	173, 173, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 110, 110, 107, 107, 108, 108,
	109, 109, 109, 111, 111, 111, 135, 135, 135, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	24, 25, 25, 183, 183, 183, 183, 183, 26, 26,
	184, 184, 190, 27, 28, 28, 29, 29, 29, 33,
	33, 33, 31, 31, 32, 32, 38, 38, 37, 37,
	39, 39, 39, 39, 123, 123, 123, 122, 41, 41,
	42, 42, 43, 43, 44, 44, 44, 56, 56, 92,
	92, 94, 94, 45, 45, 45, 45, 46, 46, 47,
	47, 48, 48, 130, 130, 129, 129, 129, 128, 50,
	50, 50, 52, 51, 51, 51, 51, 53, 53, 55,
	55, 54, 54, 57, 57, 57, 57, 58, 58, 40,
	40, 40, 40, 40, 40, 40, 106, 106, 60, 60,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	70, 70, 70, 70, 70, 70, 61, 61, 61, 61,
	61, 61, 61, 36, 36, 71, 71, 71, 77, 72,
	72, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 68, 68, 68, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	67, 67, 67, 67, 67, 67, 67, 67, 191, 191,
	69, 69, 69, 69, 34, 34, 34, 34, 34, 133,
	133, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 81, 81, 35, 35, 79, 79,
	80, 82, 82, 78, 78, 78, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 181, 65, 65, 65,
	83, 83, 84, 84, 85, 85, 86, 86, 87, 88,
	88, 88, 89, 89, 89, 89, 90, 90, 90, 62,
	62, 62, 62, 62, 62, 91, 91, 91, 91, 95,
	95, 73, 73, 75, 75, 74, 76, 182, 182, 182,
	96, 96, 100, 97, 97, 101, 101, 101, 99, 99,
	99, 125, 125, 104, 104, 112, 112, 113, 113, 105,
	105, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 116, 116, 117, 117, 117, 124,
	124, 120, 120, 120, 121, 121, 126, 127, 127, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 187,
	188, 131, 132, 132, 132,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 8, 8, 6, 1, 1, 8,
	8, 7, 6, 1, 1, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 8, 4, 6, 5, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 0, 2, 2,
	2, 2, 2, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 0, 2, 1, 2, 1, 0, 2,
	5, 4, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 3, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	3, 4, 4, 1, 1, 1, 1, 1, 2, 4,
	1, 3, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 0, 2, 2,
	1, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -185, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -24, -25, -26, -3, -4, 6, 7, -30, 9,
	10, 30, -16, 113, 114, 116, 115, 141, 117, 134,
	49, 153, 154, 156, 157, 25, 135, 136, 139, 140,
	158, 159, 160, -187, 8, 239, 53, -186, 255, -85,
	15, -29, 5, -27, -190, -27, -27, -27, -27, -27,
	-162, 53, -117, 122, 71, 149, 231, 119, 120, 126,
	-120, 56, -119, 59, 247, 153, 167, 161, 188, 180,
	178, 181, 218, 66, 156, 227, 137, 176, 172, 170,
	27, 193, 252, 171, 132, 131, 194, 198, 219, 165,
	166, 221, 192, 133, 32, 249, 34, 145, 222, 196,
	191, 187, 190, 164, 186, 38, 200, 199, 201, 217,
	183, 173, 18, 225, 140, 143, 195, 197, 127, 147,
	251, 223, 169, 144, 139, 226, 157, 220, 229, 37,
	205, 163, 130, 154, 151, 184, 146, 174, 175, 189,
	162, 185, 155, 148, 141, 228, 206, 253, 182, 179,
	152, 150, 210, 211, 212, 213, 250, 224, 177, 207,
	-105, 122, 124, 120, 120, 121, 122, 231, 119, 120,
	-54, -126, -120, 122, 149, 120, 107, 181, 113, 208,
	121, 32, 147, -135, 120, -107, 150, 210, 211, 212,
	213, 56, 220, 219, 214, -126, 155, -131, -131, -131,
	-131, -131, 159, -126, 56, -2, -89, 17, 16, -5,
	-3, -187, 6, 20, 21, -33, 39, 40, -28, -39,
	98, -40, -126, -59, 73, -64, 29, -120, 23, -78,
	-63, -60, -76, -77, 107, 108, 96, 97, 104, 74,
	109, -68, -66, -67, -69, 59, 58, 67, 60, 61,
	62, 63, 68, 57, 69, 70, -74, -187, 43, 44,
	240, 241, 242, 243, 246, 244, 76, 33, 230, 238,
	237, 236, 234, 235, 232, 233, 125, 231, 102, 239,
	-105, -42, -43, -44, -45, -56, -77, -187, -54, 11,
	-49, -54, -97, -134, 155, -101, 220, 219, -121, -99,
	-120, -118, 218, 181, 217, 118, 72, 22, 24, 203,
	75, 107, 16, 76, 106, 240, 113, 47, 232, 233,
	230, 242, 243, 231, 208, 29, 10, 25, 135, 21,
	100, 115, 79, 80, 138, 23, 136, 70, 19, 50,
	11, 13, 14, 125, 124, 91, 121, 45, 8, 109,
	26, 88, 41, 28, 43, 89, 17, 234, 235, 31,
	246, 142, 102, 48, 35, 73, 68, 51, 71, 15,
	46, 90, 116, 239, 44, 119, 6, 245, 30, 134,
	42, 120, 209, 78, 123, 69, 5, 126, 9, 49,
	52, 236, 237, 238, 33, 77, 12, -163, -158, 56,
	121, -54, 239, -120, -113, 125, -113, -113, 120, -54,
	-54, -112, 125, 56, -112, -112, -112, -54, 110, -54,
	56, 30, 231, 56, 147, 120, 148, 122, -132, -187,
	-121, -132, -132, -132, 151, 152, -132, -108, 215, 51,
	-132, -126, 11, 22, 52, -188, 55, -90, 19, 31,
	-40, -126, -86, -87, -40, -85, -2, -27, 35, -31,
	21, 65, 11, -123, 72, 71, 88, -122, 22, -120,
	110, -40, -61, 91, 73, 89, 90, 75, 93, 92,
	103, 96, 97, 98, 99, 100, 101, 102, 94, 95,
	106, 81, 82, 83, 84, 85, 86, 87, -106, -187,
	-187, -77, -187, 111, 112, -181, 64, -64, -64, -64,
	-64, -64, -64, -64, -2, -72, -40, -187, -187, -187,
	-187, -187, -187, -187, -187, -187, -81, -40, -187, -191,
	-187, -191, -191, -191, -191, -191, -191, -191, -187, -187,
	-187, -187, -55, 26, -54, 30, 54, -50, -52, -51,
	-53, 41, 45, 47, 42, 43, 44, 48, -130, 22,
	-42, -187, -129, 143, -128, 22, -126, -54, -49, -189,
	54, 11, 52, 54, -97, 155, -98, -102, 221, 223,
	81, -125, -120, 29, 30, 55, 54, -137, -140, -142,
	-141, -143, -138, -139, 178, 179, 107, 182, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 30, 137,
	174, 175, 176, 177, 194, 195, 196, 197, 198, 199,
	200, 201, 161, 162, 163, 164, 165, 166, 167, 169,
	170, 171, 172, 173, 56, -132, 122, -179, 52, 56,
	73, 56, -54, -54, -132, 123, -54, 23, 51, -54,
	56, 56, -127, -126, -118, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -110, 209, 216, -54, -183,
	-3, -7, 56, 57, 59, -183, -184, -126, 9, 91,
	54, 18, 110, 54, -88, 24, 25, -89, -188, -33,
	-65, -120, 60, 63, -32, 42, -54, -40, -40, -70,
	68, 73, 69, 70, -122, 98, -127, -121, -118, -120,
	-64, -71, -74, -77, 64, 91, 89, 90, 75, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -133, 56, 59, 56, -38, 21,
	-37, -39, -63, 59, -63, -120, -188, 54, -188, -2,
	-37, -37, -40, -40, -78, -120, -126, -78, -37, -31,
	-79, -80, 77, -78, -188, -37, -38, -37, -37, -93,
	29, 143, -54, -96, -100, -78, -43, -44, -44, -43,
	-44, 41, 41, 41, 46, 41, 46, 41, -51, -126,
	-188, -57, 49, 124, 50, -187, -128, -93, 52, -42,
	-54, -101, -98, 54, 222, 224, 225, 51, -40, -149,
	106, -164, -165, -166, -121, 60, -158, -159, -167, 127,
	130, 126, -160, 121, 28, -154, 68, 73, -150, 206,
	-144, 53, -144, -144, -144, -144, -148, 181, -148, -148,
	-148, 53, 53, -144, -144, -144, -152, 53, -152, -152,
	-153, 53, -153, -124, 52, -54, -177, 250, -178, 56,
	-132, 23, -132, -114, 118, 115, 116, -174, 114, 203,
	181, 66, 29, 15, 240, 143, 253, 56, 144, -54,
	-54, -132, -109, 11, 91, 54, 37, -40, -40, -127,
	-87, -90, -104, 19, 11, 33, 33, -37, 68, 69,
	70, 110, -187, -71, -64, -64, -64, -36, 138, 72,
	-188, -188, -37, 54, -40, -188, -188, -188, 54, 52,
	22, 54, 11, 110, 54, 11, -188, -37, -82, -80,
	79, -40, -188, -188, -188, -188, -188, -62, 30, 33,
	-2, -187, 33, -187, -58, 54, 12, 81, -47, -46,
	51, 52, -48, 51, -46, 41, 41, 121, 121, 121,
	-94, -120, -58, -42, -58, -102, -103, 226, 223, 229,
	56, 54, -166, 81, 53, 28, -160, -160, 56, 56,
	-145, 29, 68, -151, 207, 60, -148, -148, -149, 30,
	-149, -149, -149, -157, 59, -157, 60, 60, 51, -120,
	-132, -176, -175, -121, -131, -180, 149, 128, 129, 132,
	131, 56, 121, 28, 127, 130, 143, 126, -180, 149,
	-115, -116, 123, 22, 121, 28, 143, -132, -111, 89,
	12, -126, -126, -126, 38, 110, -54, -41, 11, 98,
	-121, -38, -36, 72, -64, -64, -188, -39, -136, 107,
	178, 137, 176, 172, 192, 183, 205, 174, 206, -133,
	-136, -64, -64, -121, -64, -64, 247, -85, 80, -40,
	78, -95, 51, -96, -73, -75, -74, -187, -2, -91,
	-120, -94, -85, -100, -40, -40, -40, 53, -40, -187,
	-187, -187, -188, 54, -85, -58, 223, 227, 228, -165,
	-166, -169, -168, -120, 56, 56, -147, 51, 59, 60,
	61, 68, 230, 67, 55, -149, -149, 56, 107, 55,
	54, 55, 54, 55, 54, -54, 54, 81, -131, -120,
	-131, -120, -54, -131, -120, 59, -40, -58, -42, -188,
	-64, -188, -144, -144, -144, -153, -144, 166, -144, 166,
	-188, -188, -188, 54, 19, -188, 54, 19, -187, -35,
	245, -40, -182, 254, 27, -95, 54, -188, -188, -188,
	54, 110, -188, -89, -92, -120, -92, -92, -92, -129,
	-120, -89, 55, 54, -144, -155, 203, 9, -148, 59,
	-148, 60, 60, -132, -175, -166, 53, 26, -83, 13,
	-148, 56, -64, -64, -64, -64, -64, -188, 59, 98,
	-72, 28, -75, 33, -2, -187, -120, -120, 54, 55,
	-188, -188, -188, -57, -171, -170, 52, 133, 66, -168,
	-156, 127, 28, 126, 230, -149, -149, 55, 55, -92,
	-187, -84, 14, 16, -188, -188, -188, -188, -34, 91,
	250, 9, -73, -2, 110, -120, -170, 56, -161, 81,
	59, -146, 66, 28, 28, 55, -172, -173, 143, -40,
	-72, -188, 248, 48, 251, -96, -188, -120, 60, 59,
	-179, -188, 54, -120, 38, 249, 252, -177, -173, 33,
	38, 145, 250, 146, 251, -187, 252, -64, 142, -188,
	-188,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 524, 0, 292, 292, 292, 292,
	292, 292, 0, 596, 579, 0, 0, 0, 0, -2,
	270, 271, 0, 273, 274, 801, 801, 801, 801, 801,
	0, 0, 0, 0, 37, 38, 799, 1, 3, 532,
	0, 0, 296, 299, 294, 0, 579, 0, 0, 0,
	64, 0, 0, 788, 0, 789, 577, 577, 577, 597,
	598, 601, 602, 603, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	0, 0, 580, 0, 575, 0, 575, 575, 575, 0,
	229, 361, 606, 788, 789, 0, 0, 0, 0, 802,
	802, 802, 802, 0, 802, 258, 247, 249, 250, 251,
	252, 802, 267, 268, 257, 269, 272, 275, 276, 277,
	278, 279, 0, 0, 288, 30, 536, 0, 0, 524,
	32, 0, 292, 297, 298, 302, 300, 301, 293, 0,
	310, 314, 0, 369, 0, 374, 376, -2, 0, 411,
	412, 413, 414, 415, 0, 0, 0, 0, 0, 0,
	0, 438, 439, 440, 441, -2, 507, 508, 509, 510,
	511, 512, 513, 514, 378, 379, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 494, 0, 468, 468,
	468, 468, 468, 468, 468, 468, 0, 0, 0, 0,
	0, 0, 320, 322, 323, 324, 343, 0, 345, 0,
	0, 45, 49, 0, 779, 563, -2, -2, 0, 0,
	604, 605, -2, 708, -2, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 0, 81, 0,
	0, 802, 0, 71, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 230,
	802, 802, 802, 802, 802, 802, 802, 802, 239, 803,
	804, 240, 241, 242, 802, 802, 244, 0, 259, 0,
	253, 280, 0, 0, 0, 31, 800, 25, 0, 0,
	533, 0, 525, 526, 529, 532, 30, 299, 0, 304,
	303, 295, 0, 311, 0, 0, 0, 315, 0, 317,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 396, 397, 398, 399, 400, 401, 402, 375, 0,
	306, 389, 0, 0, 0, 515, 516, 431, 432, 433,
	434, 435, 436, 0, 30, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 495, 0, 460,
	0, 461, 462, 463, 464, 465, 466, 467, 0, 306,
	0, 0, 47, 0, 360, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 352, 0, 0, 0, 0, 344,
	0, 0, 363, 752, 346, 0, 348, -2, 0, 0,
	0, 43, 44, 0, 50, 779, 52, 53, 0, 0,
	0, 161, 571, 572, 569, 189, 0, 144, 140, 86,
	87, 88, 133, 90, 133, 133, 133, 133, 158, 158,
	158, 158, 116, 117, 118, 119, 120, 0, 0, 103,
	133, 133, 133, 107, 123, 124, 125, 126, 127, 128,
	129, 130, 91, 92, 93, 94, 95, 96, 97, 135,
	135, 135, 137, 137, 599, 66, 0, 74, 0, 802,
	0, 802, 79, 0, 204, 0, 223, 576, 0, 802,
	226, 227, 362, 607, 608, 231, 232, 233, 234, 235,
	236, 237, 238, 243, 246, 260, 254, 255, 248, 281,
	283, 284, 285, 286, 287, 282, 289, 290, 537, 0,
	0, 0, 0, 0, 528, 530, 531, 536, 33, 302,
	0, 517, 0, 0, 0, 305, 28, 370, 371, 373,
	390, 0, 392, 394, 316, 312, 0, 504, -2, -2,
	380, 381, 405, 406, 407, 0, 0, 0, 0, 403,
	385, 0, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 427, 430, 479, 480, 0, 0, 0,
	307, 308, 428, 506, 429, 437, 408, 0, 555, 30,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	501, 498, 0, 0, 469, 0, 0, 0, 0, 0,
	0, 0, 359, 367, 560, 0, 321, 339, 341, 0,
	336, 350, 351, 353, 0, 355, 0, 357, 358, 325,
	326, 327, 0, 0, 0, 0, 347, 367, 0, 367,
	46, 564, 51, 0, 0, 56, 57, 565, 566, 567,
	0, 80, 190, 192, 195, 196, 82, 83, 0, 0,
	0, 0, 0, 184, 185, 147, 145, 0, 142, 141,
	89, 0, 158, 158, 110, 111, 161, 0, 161, 161,
	161, 0, 0, 104, 105, 106, 98, 0, 99, 100,
	101, 0, 102, 0, 0, 802, 68, 0, 72, 73,
	69, 578, 70, 801, 0, 0, 591, 205, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 0, 222,
	802, 225, 263, 0, 0, 0, 0, 534, 535, 0,
	527, 26, 0, 573, 574, 518, 519, 318, 391, 393,
	395, 0, 306, 382, 403, 386, 0, 383, 0, 0,
	377, 442, 0, 0, 410, -2, 445, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 524, 0, 499,
	0, 0, 459, 470, 471, 472, 473, 549, 0, 0,
	-2, 0, 36, 0, 524, 0, 0, 0, 333, 340,
	0, 0, 334, 0, 335, 354, 356, 0, 0, 0,
	0, 331, 524, 367, 42, 54, 55, 0, 0, 61,
	162, 0, 193, 0, 0, 179, 0, 0, 182, 183,
	154, 0, 146, 85, 143, 0, 161, 161, 112, 0,
	113, 114, 115, 0, 131, 0, 0, 0, 0, 600,
	67, 75, 76, 0, 197, 801, 0, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 801, 0,
	0, 801, 592, 593, 594, 595, 0, 224, 245, 0,
	0, 261, 262, 291, 538, 0, 27, 367, 0, 313,
	505, 0, 384, 0, 404, 387, 443, 309, 0, 133,
	133, 484, 133, 137, 487, 133, 489, 133, 492, 0,
	0, 0, 0, 504, 0, 0, 0, 496, 458, 502,
	0, 557, 0, 549, 539, 551, 553, 0, 30, 0,
	545, 0, 532, 561, 368, 562, 337, 0, 342, 0,
	0, 0, 345, 0, 532, 41, 58, 59, 60, 191,
	194, 0, 186, 133, 180, 181, 156, 0, 148, 149,
	150, 151, 152, 153, 134, 108, 109, 159, 160, 158,
	0, 158, 0, 138, 0, 802, 0, 0, 198, 0,
	199, 201, 202, 203, 0, 264, 265, 520, 319, 444,
	388, 447, 481, 158, 485, 486, 488, 490, 491, 493,
	449, 448, 450, 0, 0, 453, 0, 0, 0, 0,
	0, 500, 34, 0, 0, 35, 0, 554, -2, 0,
	0, 0, 48, 39, 0, 329, 0, 0, 0, 363,
	332, 40, 171, 0, 188, 163, 157, 0, 161, 132,
	161, 0, 0, 65, 77, 78, 0, 0, 522, 0,
	482, 483, 0, 0, 0, 0, 474, 457, 497, 558,
	559, 0, 552, 0, -2, 0, 547, 546, 0, 338,
	364, 365, 366, 328, 170, 172, 0, 177, 0, 187,
	168, 0, 165, 167, 155, 121, 122, 136, 139, 0,
	0, 29, 0, 0, 451, 452, 454, 455, 0, 0,
	0, 0, 542, 30, 0, 330, 173, 174, 0, 178,
	176, 84, 0, 164, 166, 71, 0, 218, 0, 523,
	521, 456, 0, 0, 0, 550, -2, 548, 175, 169,
	74, 217, 0, 0, 475, 0, 478, 200, 219, 0,
	476, 0, 0, 0, 0, 0, 477, 0, 0, 220,
	221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 255,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:353
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:361
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:365
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:371
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:378
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:398
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:405
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Returning = yyDollar[8].returning
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:418
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:428
		{
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Default: true}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:434
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:438
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:444
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:468
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:472
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:477
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:481
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:499
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:551
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:557
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:562
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:567
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:571
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:592
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:602
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:607
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:623
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:629
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:635
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:642
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:654
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:664
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:675
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:686
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:883
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:888
		{
			yyVAL.optVal = nil
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:892
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:897
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:901
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:909
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:919
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:927
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:936
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:946
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:954
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:959
		{
			yyVAL.optVal = nil
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:963
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:971
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:975
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = nil
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1001
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1006
		{
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1014
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1028
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1032
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1036
		{
			yyVAL.colKeyOpt = colKey
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1044
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.optVal = nil
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1059
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1063
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1069
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1073
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1079
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1083
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1094
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1098
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1108
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1140
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1146
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1151
		{
			yyVAL.str = ""
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = yyDollar[1].str
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			if yyDollar[1].colIdent.NeedQuotes() {
				yyVAL.str = "'" + yyDollar[1].colIdent.String() + "'"
			} else {
				yyVAL.str = yyDollar[1].colIdent.String()
			}

		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1196
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1200
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1204
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1208
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1221
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1231
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1236
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1241
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1245
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1264
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1270
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1274
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1280
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1284
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1290
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1296
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1304
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1309
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1327
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1342
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1387
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1391
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1399
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1453
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1459
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1463
		{
			yyVAL.str = "extended "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1469
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1473
		{
			yyVAL.str = "full "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1479
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1483
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1493
		{
			yyVAL.showFilter = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1497
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1501
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1507
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1511
		{
			yyVAL.str = SessionStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = GlobalStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Begin{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Begin{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &Commit{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Rollback{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1557
		{
			yyVAL.statement = &OtherRead{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &DeallocatePrepare{PreparedStatementName: yyDollar[3].tableIdent}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, From: yyDollar[4].fromInPrepare}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1585
		{
			yyVAL.statement = &Prepare{PreparedStatementName: yyDollar[2].tableIdent, From: yyDollar[4].fromInPrepare}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1591
		{
			yyVAL.fromInPrepare = yyDollar[1].selStmt.(*Select)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1595
		{
			yyVAL.fromInPrepare = yyDollar[1].statement.(*Insert)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1599
		{
			yyVAL.fromInPrepare = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1603
		{
			yyVAL.fromInPrepare = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.fromInPrepare = NewStrVal(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes))}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &Execute{PreparedStatementName: NewTableIdent(string(yyDollar[2].bytes)), Using: yyDollar[4].usingInExecuteList}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1623
		{
			yyVAL.usingInExecuteList = UsingInExecuteList{yyDollar[1].tableIdent}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1627
		{
			yyVAL.usingInExecuteList = append(yyDollar[1].usingInExecuteList, yyDollar[3].tableIdent)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1632
		{
			setAllowComments(yylex, true)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1636
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1642
		{
			yyVAL.bytes2 = nil
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1646
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			yyVAL.str = UnionStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.str = UnionAllStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.str = UnionDistinctStr
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1665
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.str = SQLCacheStr
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1678
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.str = DistinctStr
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1691
		{
			yyVAL.str = StraightJoinHint
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1696
		{
			yyVAL.selectExprs = nil
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1710
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1720
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1724
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1728
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1733
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1741
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1749
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1753
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1763
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1773
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1777
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1781
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1787
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1791
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1797
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1801
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1811
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1824
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1828
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1832
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1836
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1842
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1844
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1848
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1850
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1854
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1856
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1859
		{
			yyVAL.empty = struct{}{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1861
		{
			yyVAL.empty = struct{}{}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1864
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1872
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.str = JoinStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = JoinStr
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = JoinStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1896
		{
			yyVAL.str = StraightJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1902
		{
			yyVAL.str = LeftJoinStr
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1906
		{
			yyVAL.str = LeftJoinStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1910
		{
			yyVAL.str = RightJoinStr
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.str = RightJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1920
		{
			yyVAL.str = NaturalJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1924
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1934
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1944
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1948
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1953
		{
			yyVAL.indexHints = nil
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1957
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1961
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1965
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1970
		{
			yyVAL.expr = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1974
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1984
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1988
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1996
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2010
		{
			yyVAL.str = ""
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2020
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2030
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2034
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2038
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2042
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2046
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2050
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2054
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2058
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2062
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2066
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = IsNullStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.str = IsNotNullStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = IsTrueStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2084
		{
			yyVAL.str = IsNotTrueStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.str = IsFalseStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2092
		{
			yyVAL.str = IsNotFalseStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = EqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = LessThanStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = GreaterThanStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = LessEqualStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = GreaterEqualStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = NotEqualStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2127
		{
			yyVAL.expr = nil
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2131
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2151
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2161
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2229
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2233
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2237
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2241
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2253
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2257
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2265
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2279
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2287
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2323
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 451:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 452:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 456:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 457:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2453
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.str = BooleanModeStr
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2461
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 477:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = QueryExpansionStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2475
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2479
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2485
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2519
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2531
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2540
		{
			yyVAL.expr = nil
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2544
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2549
		{
			yyVAL.str = string("")
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2569
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = nil
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2584
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2592
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &NullVal{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = NewPgEscapeString(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = NewCastVal(yyDollar[1].expr, yyDollar[2].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2640
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2648
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2666
		{
			yyVAL.exprs = nil
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2670
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = nil
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2684
		{
			yyVAL.orderBy = nil
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2688
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2694
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2698
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2709
		{
			yyVAL.str = AscScr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.str = AscScr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			yyVAL.str = DescScr
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2722
		{
			yyVAL.limit = nil
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2730
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2734
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2739
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2743
		{
			yyVAL.str = ForUpdateStr
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2747
		{
			yyVAL.str = ShareModeStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2760
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2773
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2777
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2781
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2792
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2796
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2800
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2805
		{
			yyVAL.updateExprs = nil
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2809
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2819
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2825
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2835
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2841
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2850
		{
			yyVAL.returning = nil
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.returning = Returning{&StarExpr{}}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2860
		{
			yyVAL.returning = Returning(yyDollar[2].exprs)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2871
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2887
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2897
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2901
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2908
		{
			yyVAL.bytes = []byte("charset")
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &Default{}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2928
		{
			yyVAL.byt = 0
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2930
		{
			yyVAL.byt = 1
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2933
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2938
		{
			yyVAL.str = ""
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.str = IgnoreStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2956
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2962
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2965
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2969
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2975
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2978
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2985
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2987
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.colIdent = NewColIdentWithQuotes(string(yyDollar[1].bytes), true)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3006
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3012
		{
			yyVAL.tableIdent = NewTableIdentWithQuotes(yyDollar[1].colIdent.String(), yyDollar[1].colIdent.NeedQuotes())
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			decNesting(yylex)
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3249
		{
			forceEOF(yylex)
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3254
		{
			forceEOF(yylex)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3258
		{
			forceEOF(yylex)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3262
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
